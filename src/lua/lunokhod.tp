; bootstrap
(!line "@lua/lunokhod.lua" 1)
(!line 7)(!define _G _G)
(!line 8)(!define arg arg)
(!line 9)(!define assert assert)
(!line 10)(!define error error)
(!line 11)(!define tonumber tonumber)
(!line 12)(!define print print)
(!line 13)(!define char (!index string "char"))
(!line 14)(!define quote (!index tvm "quote"))
(!line 15)(!define tconcat (!index table "concat"))
(!line 16)(!define peg (!call require "lpeg"))
(!line 17)(!define locale (!call (!index peg "locale") ))
(!line 18)(!define C (!index peg "C"))
(!line 19)(!define Cb (!index peg "Cb"))
(!line 20)(!define Cg (!index peg "Cg"))
(!line 21)(!define Cmt (!index peg "Cmt"))
(!line 22)(!define Cp (!index peg "Cp"))
(!line 23)(!define Cs (!index peg "Cs"))
(!line 24)(!define P (!index peg "P"))
(!line 25)(!define R (!index peg "R"))
(!line 26)(!define S (!index peg "S"))
(!line 29)(!define lineno)
(!line 30)(!define inc_lineno)(!assign inc_lineno (!lambda ()
(!line 31)(!assign lineno (!add lineno 1))))

(!line 33)(!define inc_lineno2)(!assign inc_lineno2 (!lambda ()
(!line 34)(!assign lineno (!add lineno 0.5))))

(!line 36)(!define syntaxerror)(!assign syntaxerror (!lambda (err)
(!line 37)(!call error (!concat err (!concat " at " lineno)))))

(!line 40)(!define bytecode (!call P "\x1B"))
(!line 41)(!define bom (!call P "ï»¿"))
(!line 42)(!define shebang (!mul (!call P "#!") (!pow (!sub (!call1 P 1) (!call S "\x0C\x0A\x0D")) 0)))
(!line 43)(!define long_string)

(!line 43)(!do
(!line 44)(!define equals (!pow (!call P "=") 0))
(!line 45)(!define open (!mul (!mul (!mul (!call P "[") (!call Cg equals "init")) (!call P "[")) (!pow (!div (!call1 P "\x0A") inc_lineno2) (!neg 1))))
(!line 46)(!define close (!mul (!mul (!call P "]") (!call C equals)) (!call P "]")))
(!line 47)(!define closeeq (!call Cmt (!mul close (!call Cb "init")) (!lambda (s i a b)
(!line 47)(!return (!eq a b)))))
(!line 48)(!assign long_string (!div (!mul (!mul open (!call C (!pow (!add (!div (!call1 P "\x0A") inc_lineno2) (!sub (!call1 P 1) closeeq)) 0))) close) quote)))
(!line 50)(!define ws)

(!line 50)(!do
(!line 51)(!define comment (!mul (!call P "--") (!pow (!add (!div long_string (!lambda ()
(!line 51)(!return ))) (!sub (!call1 P 1) (!call S "\x0C\x0A\x0D"))) 0)))
(!line 52)(!assign ws (!pow (!add (!add (!call1 S " \x0C\x09\x0D\x0B") (!div (!call1 P "\x0A") inc_lineno)) comment) 0)))
(!line 54)(!define capt_ws (!mul (!call C ws) (!call Cp )))
(!line 56)(!define ch_ident (!call R "09" "AZ" "az" "__"))
(!line 57)(!define tok_identifier)

(!line 57)(!do
(!line 58)(!define reserved ("and": !true "break": !true "do": !true "else": !true "elseif": !true "end": !true "false": !true "for": !true "function": !true "goto": !true "if": !true "in": !true "local": !true "nil": !true "not": !true "or": !true "repeat": !true "return": !true "then": !true "true": !true "until": !true "while": !true ))
(!line 82)(!define check_reserved (!lambda (tok)
(!line 83)(!if (!not (!index reserved tok))
(!do
(!line 84)(!return tok)))))
(!line 87)(!assign tok_identifier (!div (!mul (!call1 R "AZ" "az" "__") (!pow ch_ident 0)) check_reserved)))
(!line 89)(!define capt_identifier (!mul tok_identifier (!call Cp )))
(!line 91)(!define tok_number)

(!line 91)(!do
(!line 92)(!define int (!pow (!index locale "digit") 1))
(!line 93)(!define frac (!mul (!call P ".") (!pow (!index locale "digit") 0)))
(!line 94)(!define sign (!call S "-+"))
(!line 95)(!define exp (!mul (!mul (!call S "Ee") (!pow sign (!neg 1))) (!pow (!index locale "digit") 1)))
(!line 96)(!define xint (!mul (!mul (!call P "0") (!call S "xX")) (!pow (!index locale "xdigit") 1)))
(!line 97)(!define xfrac (!mul (!call P ".") (!pow (!index locale "xdigit") 0)))
(!line 98)(!define xexp (!mul (!mul (!call S "Pp") (!pow sign (!neg 1))) (!pow (!index locale "digit") 1)))
(!line 99)(!assign tok_number (!add (!mul (!mul xint (!pow xfrac (!neg 1))) (!pow xexp (!neg 1))) (!mul (!mul (!mul (!pow (!call1 P "-") (!neg 1)) int) (!pow frac (!neg 1))) (!pow exp (!neg 1))))))
(!line 101)(!define capt_number (!mul (!call C tok_number) (!call Cp )))
(!line 103)(!define tok_string)

(!line 103)(!do
(!line 104)(!define gsub)(!assign gsub (!lambda (patt repl)
(!line 105)(!return (!call Cs (!pow (!add (!div patt repl) (!call P 1)) 0)))))

(!line 108)(!define special ("'": "'" "\"": "\"" "\\": "\\" "/": "/" "a": "\x07" "b": "\x08" "f": "\x0C" "n": "\x0A" "r": "\x0D" "t": "\x09" "v": "\x0B" ))
(!line 122)(!define escape_special (!mul (!call P "\\") (!call C (!call S "'\"\\/abfnrtv"))))
(!line 123)(!define gsub_escape_special (!call gsub escape_special special))
(!line 124)(!define escape_xdigit (!mul (!call P "\\x") (!call C (!mul (!index locale "xdigit") (!index locale "xdigit")))))
(!line 125)(!define gsub_escape_xdigit (!call gsub escape_xdigit (!lambda (s)
(!line 126)(!return (!call char (!call tonumber s 16))))))
(!line 128)(!define escape_decimal (!mul (!call P "\\") (!call C (!mul (!mul (!index locale "digit") (!pow (!index locale "digit") (!neg 1))) (!pow (!index locale "digit") (!neg 1))))))
(!line 129)(!define gsub_escape_decimal (!call gsub escape_decimal (!lambda (s)
(!line 130)(!define n (!call tonumber s))
(!line 131)(!if (!ge n 256)
(!do
(!line 132)(!call syntaxerror (!concat "decimal escape too large near " s))))
(!line 134)(!return (!call char n)))))
(!line 137)(!define unescape (!lambda (str)
(!line 138)(!return (!callmeth gsub_escape_special match (!callmeth gsub_escape_xdigit match (!callmeth gsub_escape_decimal match str))))))
(!line 141)(!define zap (!div (!mul (!mul (!call1 P "\\z") (!pow (!call S "\x0A\x0D") 1)) (!pow (!index locale "space") 1)) ""))
(!line 142)(!define ch_sq (!add (!add (!add zap (!call P "\\\\")) (!call P "\\'")) (!sub (!sub (!call1 P 1) (!call P "'")) (!call R "\x00\x1F"))))
(!line 143)(!define ch_dq (!add (!add (!add zap (!call P "\\\\")) (!call P "\\\"")) (!sub (!sub (!call1 P 1) (!call P "\"")) (!call R "\x00\x1F"))))
(!line 144)(!define simple_quote_string (!div (!div (!mul (!mul (!call1 P "'") (!call Cs (!pow ch_sq 0))) (!call P "'")) unescape) quote))
(!line 145)(!define double_quote_string (!div (!div (!mul (!mul (!call1 P "\"") (!call Cs (!pow ch_dq 0))) (!call P "\"")) unescape) quote))
(!line 146)(!assign tok_string (!add (!add simple_quote_string double_quote_string) long_string)))
(!line 148)(!define capt_string (!mul tok_string (!call Cp )))
(!line 151)(!define not_ch_ident (!neg ch_ident))
(!line 152)(!define tok_and (!mul (!call P "and") not_ch_ident))
(!line 153)(!define capt_and (!mul (!call C tok_and) (!call Cp )))
(!line 154)(!define tok_break (!mul (!call P "break") not_ch_ident))
(!line 155)(!define capt_break (!mul (!call C tok_break) (!call Cp )))
(!line 156)(!define tok_do (!mul (!call P "do") not_ch_ident))
(!line 157)(!define capt_do (!mul (!call C tok_do) (!call Cp )))
(!line 158)(!define tok_else (!mul (!call P "else") not_ch_ident))
(!line 159)(!define capt_else (!mul (!call C tok_else) (!call Cp )))
(!line 160)(!define tok_elseif (!mul (!call P "elseif") not_ch_ident))
(!line 161)(!define capt_elseif (!mul (!call C tok_elseif) (!call Cp )))
(!line 162)(!define tok_end (!mul (!call P "end") not_ch_ident))
(!line 163)(!define capt_end (!mul (!call C tok_end) (!call Cp )))
(!line 164)(!define tok_false (!mul (!call P "false") not_ch_ident))
(!line 165)(!define capt_false (!mul (!call C tok_false) (!call Cp )))
(!line 166)(!define tok_for (!mul (!call P "for") not_ch_ident))
(!line 167)(!define capt_for (!mul (!call C tok_for) (!call Cp )))
(!line 168)(!define tok_function (!mul (!call P "function") not_ch_ident))
(!line 169)(!define capt_function (!mul (!call C tok_function) (!call Cp )))
(!line 170)(!define tok_goto (!mul (!call P "goto") not_ch_ident))
(!line 171)(!define capt_goto (!mul (!call C tok_goto) (!call Cp )))
(!line 172)(!define tok_if (!mul (!call P "if") not_ch_ident))
(!line 173)(!define capt_if (!mul (!call C tok_if) (!call Cp )))
(!line 174)(!define tok_in (!mul (!call P "in") not_ch_ident))
(!line 175)(!define capt_in (!mul (!call C tok_in) (!call Cp )))
(!line 176)(!define tok_local (!mul (!call P "local") not_ch_ident))
(!line 177)(!define capt_local (!mul (!call C tok_local) (!call Cp )))
(!line 178)(!define tok_nil (!mul (!call P "nil") not_ch_ident))
(!line 179)(!define capt_nil (!mul (!call C tok_nil) (!call Cp )))
(!line 180)(!define tok_not (!mul (!call P "not") not_ch_ident))
(!line 181)(!define capt_not (!mul (!call C tok_not) (!call Cp )))
(!line 182)(!define tok_or (!mul (!call P "or") not_ch_ident))
(!line 183)(!define capt_or (!mul (!call C tok_or) (!call Cp )))
(!line 184)(!define tok_repeat (!mul (!call P "repeat") not_ch_ident))
(!line 185)(!define capt_repeat (!mul (!call C tok_repeat) (!call Cp )))
(!line 186)(!define tok_return (!mul (!call P "return") not_ch_ident))
(!line 187)(!define capt_return (!mul (!call C tok_return) (!call Cp )))
(!line 188)(!define tok_then (!mul (!call P "then") not_ch_ident))
(!line 189)(!define capt_then (!mul (!call C tok_then) (!call Cp )))
(!line 190)(!define tok_true (!mul (!call P "true") not_ch_ident))
(!line 191)(!define capt_true (!mul (!call C tok_true) (!call Cp )))
(!line 192)(!define tok_until (!mul (!call P "until") not_ch_ident))
(!line 193)(!define capt_until (!mul (!call C tok_until) (!call Cp )))
(!line 194)(!define tok_while (!mul (!call P "while") not_ch_ident))
(!line 195)(!define capt_while (!mul (!call C tok_while) (!call Cp )))
(!line 198)(!define tok_colon (!call P ":"))
(!line 199)(!define capt_colon (!mul (!call C tok_colon) (!call Cp )))
(!line 200)(!define tok_comma (!call P ","))
(!line 201)(!define capt_comma (!mul (!call C tok_comma) (!call Cp )))
(!line 202)(!define tok_dbcolon (!call P "::"))
(!line 203)(!define capt_dbcolon (!mul (!call C tok_dbcolon) (!call Cp )))
(!line 204)(!define tok_dot (!mul (!call P ".") (!neg (!call P "."))))
(!line 205)(!define capt_dot (!mul (!call C tok_dot) (!call Cp )))
(!line 206)(!define tok_equal (!call P "="))
(!line 207)(!define capt_equal (!mul (!call C tok_equal) (!call Cp )))
(!line 208)(!define tok_left_brace (!call P "{"))
(!line 209)(!define capt_left_brace (!mul (!call C tok_left_brace) (!call Cp )))
(!line 210)(!define tok_left_bracket (!mul (!mul (!call P "[") (!neg (!call P "["))) (!neg (!call P "="))))
(!line 211)(!define capt_left_bracket (!mul (!call C tok_left_bracket) (!call Cp )))
(!line 212)(!define tok_left_paren (!call P "("))
(!line 213)(!define capt_left_paren (!mul (!call C tok_left_paren) (!call Cp )))
(!line 214)(!define tok_right_brace (!call P "}"))
(!line 215)(!define capt_right_brace (!mul (!call C tok_right_brace) (!call Cp )))
(!line 216)(!define tok_right_bracket (!call P "]"))
(!line 217)(!define capt_right_bracket (!mul (!call C tok_right_bracket) (!call Cp )))
(!line 218)(!define tok_right_paren (!call P ")"))
(!line 219)(!define capt_right_paren (!mul (!call C tok_right_paren) (!call Cp )))
(!line 220)(!define tok_semicolon (!call P ";"))
(!line 221)(!define capt_semicolon (!mul (!call C tok_semicolon) (!call Cp )))
(!line 222)(!define tok_sel (!call S ".:"))
(!line 223)(!define capt_sel (!mul (!call C tok_sel) (!call Cp )))
(!line 224)(!define tok_sep (!call S ",;"))
(!line 225)(!define capt_sep (!mul (!call C tok_sep) (!call Cp )))
(!line 226)(!define tok_vararg (!call P "..."))
(!line 227)(!define capt_vararg (!mul (!call C tok_vararg) (!call Cp )))
(!line 229)(!define unopr (!add (!add tok_not (!call P "-")) (!call P "#")))
(!line 230)(!define capt_unopr (!mul (!call C unopr) (!call Cp )))
(!line 231)(!define binopr (!add (!add (!add (!add (!add (!add (!add (!add (!add (!add (!add (!add (!add (!add (!call P "+") (!call P "-")) (!call P "*")) (!call P "/")) (!call P "%")) (!call P "^")) (!call P "..")) (!call P "~=")) (!call P "==")) (!call P "<=")) (!call P "<")) (!call P ">=")) (!call P ">")) tok_and) tok_or))
(!line 233)(!define capt_binopr (!mul (!call C binopr) (!call Cp )))
(!line 236)(!define statement)

(!line 237)(!define expr)

(!line 240)(!define block_follow)(!assign block_follow (!lambda (s pos withuntil)
(!line 241)(!if (!callmeth1 (!call1 P "else") match s pos)
(!do
(!line 242)(!return !true)))
(!line 244)(!if (!callmeth1 (!call1 P "elseif") match s pos)
(!do
(!line 245)(!return !true)))
(!line 247)(!if (!callmeth1 (!call1 P "end") match s pos)
(!do
(!line 248)(!return !true)))
(!line 250)(!if (!callmeth1 (!call1 P (!neg 1)) match s pos)
(!do
(!line 251)(!return !true)))
(!line 253)(!if (!callmeth1 (!call1 P "until") match s pos)
(!do
(!line 254)(!return withuntil)))
(!line 256)(!return !false)))

(!line 260)(!define skip_ws)(!assign skip_ws (!lambda (s pos)
(!line 261)(!define (capt posn) ((!callmeth capt_ws match s pos)))
(!line 262)(!return posn)))

(!line 266)(!define statlist)(!assign statlist (!lambda (s pos buffer)
(!line 268)(!assign pos (!call skip_ws s pos))
(!line 269)(!while (!not (!call block_follow s pos !true))

(!line 270)(!assign (!index buffer (!add (!len1 buffer) 1)) "\x0A")
(!line 271)(!if (!callmeth1 tok_return match s pos)
(!do
(!line 272)(!return (!call statement s pos buffer))))
(!line 274)(!assign pos (!call statement s pos buffer))
(!line 275)(!assign pos (!call skip_ws s pos)))
(!line 277)(!return pos)))

(!line 281)(!define fieldsel)(!assign fieldsel (!lambda (s pos buffer)
(!line 283)(!define (capt posn) ((!callmeth capt_sel match s pos)))
(!line 284)(!call assert posn)
(!line 285)(!assign pos (!call skip_ws s posn))
(!line 286)(!massign (capt posn) ((!callmeth capt_identifier match s pos)))
(!line 287)(!if (!not posn)
(!do
(!line 288)(!call syntaxerror "<name> expected")))
(!line 290)(!assign (!index buffer (!add (!len1 buffer) 1)) (!call quote capt))
(!line 291)(!return posn)))

(!line 295)(!define yindex)(!assign yindex (!lambda (s pos buffer)
(!line 297)(!define (capt posn) ((!callmeth capt_left_bracket match s pos)))
(!line 298)(!call assert posn)
(!line 299)(!assign pos (!call skip_ws s posn))
(!line 300)(!assign pos (!call expr s pos buffer !true))
(!line 301)(!massign (capt posn) ((!callmeth capt_right_bracket match s pos)))
(!line 302)(!if (!not posn)
(!do
(!line 303)(!call syntaxerror "] expected")))
(!line 305)(!return posn)))

(!line 309)(!define recfield)(!assign recfield (!lambda (s pos buffer)
(!line 311)(!define (capt posn) ((!callmeth capt_identifier match s pos)))
(!line 312)(!if posn
(!do
(!line 313)(!assign (!index buffer (!add (!len1 buffer) 1)) "\"")
(!line 314)(!assign (!index buffer (!add (!len1 buffer) 1)) capt)
(!line 315)(!assign (!index buffer (!add (!len1 buffer) 1)) "\"")
(!line 316)(!assign pos posn))(!do
(!line 318)(!assign pos (!call yindex s pos buffer))))
(!line 320)(!assign pos (!call skip_ws s pos))
(!line 321)(!massign (capt posn) ((!callmeth capt_equal match s pos)))
(!line 322)(!if (!not posn)
(!do
(!line 323)(!call syntaxerror "= expected")))
(!line 325)(!assign (!index buffer (!add (!len1 buffer) 1)) ": ")
(!line 326)(!assign pos (!call skip_ws s posn))
(!line 327)(!return (!call expr s pos buffer !true))))

(!line 331)(!define listfield)(!assign listfield (!lambda (s pos buffer list)
(!line 333)(!if (!eq (!len1 list) 0)
(!do
(!line 334)(!assign (!index buffer (!add (!len1 buffer) 1)) "!nil ")
(!line 335)(!assign (!index list 1) !true)))
(!line 337)(!return (!call expr s pos buffer))))

(!line 341)(!define field)(!assign field (!lambda (s pos buffer list)
(!line 343)(!define (capt posn) ((!callmeth capt_identifier match s pos)))
(!line 344)(!if posn
(!do
(!line 345)(!if (!callmeth1 (!mul ws tok_equal) match s posn)
(!do
(!line 346)(!return (!call recfield s pos buffer)))(!do
(!line 348)(!return (!call listfield s pos buffer list))))))
(!line 351)(!if (!callmeth1 tok_left_bracket match s pos)
(!do
(!line 352)(!return (!call recfield s pos buffer))))
(!line 354)(!return (!call listfield s pos buffer list))))

(!line 358)(!define constructor)(!assign constructor (!lambda (s pos buffer)
(!line 360)(!define (capt posn) ((!callmeth capt_left_brace match s pos)))
(!line 361)(!if (!not posn)
(!do
(!line 362)(!call syntaxerror "{ expected")))
(!line 364)(!assign (!index buffer (!add (!len1 buffer) 1)) "(")
(!line 365)(!assign pos (!call skip_ws s posn))
(!line 366)(!define list ())
(!line 367)(!repeat
(!line 368)(!if (!callmeth1 tok_right_brace match s pos)
(!do
(!line 369)(!break)))
(!line 371)(!assign pos (!call field s pos buffer list))
(!line 372)(!assign pos (!call skip_ws s pos))
(!line 373)(!massign (capt posn) ((!callmeth capt_sep match s pos)))
(!line 374)(!if posn
(!do
(!line 375)(!assign (!index buffer (!add (!len1 buffer) 1)) " ")
(!line 376)(!assign pos (!call skip_ws s posn))))
(!not posn))
(!line 379)(!massign (capt posn) ((!callmeth capt_right_brace match s pos)))
(!line 380)(!if (!not posn)
(!do
(!line 381)(!call syntaxerror "} expected")))
(!line 383)(!assign (!index buffer (!add (!len1 buffer) 1)) ")")
(!line 384)(!return posn)))

(!line 388)(!define parlist)(!assign parlist (!lambda (s pos buffer ismethod)
(!line 391)(!if ismethod
(!do
(!line 392)(!assign (!index buffer (!add (!len1 buffer) 1)) "self")))
(!line 394)(!if (!not (!callmeth tok_right_paren match s pos))
(!do
(!line 395)(!if ismethod
(!do
(!line 396)(!assign (!index buffer (!add (!len1 buffer) 1)) " ")))
(!line 398)(!repeat
(!line 399)(!define (capt posn) ((!callmeth capt_identifier match s pos)))
(!line 400)(!if posn
(!do
(!line 401)(!assign (!index buffer (!add (!len1 buffer) 1)) capt)
(!line 402)(!assign pos posn))(!do
(!line 404)(!massign (capt posn) ((!callmeth capt_vararg match s pos)))
(!line 405)(!if posn
(!do
(!line 406)(!assign (!index buffer (!add (!len1 buffer) 1)) "!vararg")
(!line 407)(!return posn))(!do
(!line 409)(!call syntaxerror "<name> or '...' expected")))))
(!line 412)(!assign pos (!call skip_ws s pos))
(!line 413)(!massign (capt posn) ((!callmeth capt_comma match s pos)))
(!line 414)(!if posn
(!do
(!line 415)(!assign (!index buffer (!add (!len1 buffer) 1)) " ")
(!line 416)(!assign pos (!call skip_ws s posn))))
(!not posn))))
(!line 420)(!return pos)))

(!line 424)(!define body)(!assign body (!lambda (s pos buffer ismethod)
(!line 426)(!define (capt posn) ((!callmeth capt_left_paren match s pos)))
(!line 427)(!if (!not posn)
(!do
(!line 428)(!call syntaxerror "( expected")))
(!line 430)(!assign (!index buffer (!add (!len1 buffer) 1)) "(")
(!line 431)(!assign pos (!call skip_ws s posn))
(!line 432)(!assign pos (!call parlist s pos buffer ismethod))
(!line 433)(!assign pos (!call skip_ws s pos))
(!line 434)(!massign (capt posn) ((!callmeth capt_right_paren match s pos)))
(!line 435)(!if (!not posn)
(!do
(!line 436)(!call syntaxerror ") expected")))
(!line 438)(!assign (!index buffer (!add (!len1 buffer) 1)) ")")
(!line 439)(!assign pos (!call statlist s posn buffer))
(!line 440)(!assign pos (!call skip_ws s pos))
(!line 441)(!massign (capt posn) ((!callmeth capt_end match s pos)))
(!line 442)(!if (!not posn)
(!do
(!line 443)(!call syntaxerror "'end' expected")))
(!line 445)(!assign (!index buffer (!add (!len1 buffer) 1)) ")")
(!line 446)(!return posn)))

(!line 450)(!define explist)(!assign explist (!lambda (s pos buffer)
(!line 452)(!assign pos (!call expr s pos buffer))
(!line 453)(!assign pos (!call skip_ws s pos))
(!line 454)(!define (capt posn) ((!callmeth capt_comma match s pos)))
(!line 455)(!while posn

(!line 456)(!assign (!index buffer (!add (!len1 buffer) 1)) " ")
(!line 457)(!assign pos (!call skip_ws s posn))
(!line 458)(!assign pos (!call expr s pos buffer))
(!line 459)(!assign pos (!call skip_ws s pos))
(!line 460)(!massign (capt posn) ((!callmeth capt_comma match s pos))))
(!line 462)(!return pos)))

(!line 466)(!define funcargs)(!assign funcargs (!lambda (s pos buffer)
(!line 468)(!define (capt posn) ((!callmeth capt_left_paren match s pos)))
(!line 469)(!if posn
(!do
(!line 470)(!assign pos (!call skip_ws s posn))
(!line 471)(!massign (capt posn) ((!callmeth capt_right_paren match s pos)))
(!line 472)(!if posn
(!do
(!line 473)(!return posn)))
(!line 475)(!assign pos (!call explist s pos buffer))
(!line 476)(!massign (capt posn) ((!callmeth capt_right_paren match s pos)))
(!line 477)(!if posn
(!do
(!line 478)(!return posn))(!do
(!line 480)(!call syntaxerror ") expected")))))
(!line 484)(!if (!callmeth1 tok_left_brace match s pos)
(!do
(!line 485)(!return (!call constructor s pos buffer))))
(!line 488)(!massign (capt posn) ((!callmeth capt_string match s pos)))
(!line 489)(!if posn
(!do
(!line 490)(!assign (!index buffer (!add (!len1 buffer) 1)) capt)
(!line 491)(!return posn)))
(!line 493)(!call syntaxerror "function arguments expected")))

(!line 497)(!define primaryexpr)(!assign primaryexpr (!lambda (s pos buffer)
(!line 499)(!assign pos (!call skip_ws s pos))
(!line 500)(!define (capt posn) ((!callmeth capt_left_paren match s pos)))
(!line 501)(!if posn
(!do
(!line 502)(!assign pos (!call expr s posn buffer !true))
(!line 503)(!assign pos (!call skip_ws s pos))
(!line 504)(!massign (capt posn) ((!callmeth capt_right_paren match s pos)))
(!line 505)(!if posn
(!do
(!line 506)(!return posn))(!do
(!line 508)(!call syntaxerror ") expected")))))
(!line 511)(!massign (capt posn) ((!callmeth capt_identifier match s pos)))
(!line 512)(!if posn
(!do
(!line 513)(!assign (!index buffer (!add (!len1 buffer) 1)) capt)
(!line 514)(!return posn)))
(!line 516)(!call syntaxerror "unexpected symbol")))

(!line 520)(!define suffixedexpr)(!assign suffixedexpr (!lambda (s pos buffer one)
(!line 523)(!define buf ())
(!line 524)(!assign pos (!call primaryexpr s pos buf))
(!line 525)(!define exp (!call tconcat buf))
(!line 526)(!while !true

(!line 527)(!assign buf ())
(!line 528)(!assign pos (!call skip_ws s pos))
(!line 529)(!if (!callmeth1 tok_dot match s pos)
(!do
(!line 530)(!assign (!index buf (!add (!len1 buf) 1)) "(!index ")
(!line 531)(!assign (!index buf (!add (!len1 buf) 1)) exp)
(!line 532)(!assign (!index buf (!add (!len1 buf) 1)) " ")
(!line 533)(!assign pos (!call fieldsel s pos buf))
(!line 534)(!assign (!index buf (!add (!len1 buf) 1)) ")")
(!line 535)(!assign exp (!call tconcat buf)))(!if (!callmeth1 tok_left_bracket match s pos)
(!do
(!line 537)(!assign (!index buf (!add (!len1 buf) 1)) "(!index ")
(!line 538)(!assign (!index buf (!add (!len1 buf) 1)) exp)
(!line 539)(!assign (!index buf (!add (!len1 buf) 1)) " ")
(!line 540)(!assign pos (!call yindex s pos buf))
(!line 541)(!assign (!index buf (!add (!len1 buf) 1)) ")")
(!line 542)(!assign exp (!call tconcat buf)))(!if (!callmeth1 tok_colon match s pos)
(!do
(!line 544)(!define (_ posn) ((!callmeth capt_colon match s pos)))
(!line 545)(!if one
(!do
(!line 546)(!assign (!index buf (!add (!len1 buf) 1)) "(!callmeth1 "))(!do
(!line 548)(!assign (!index buf (!add (!len1 buf) 1)) "(!callmeth ")))
(!line 550)(!assign (!index buf (!add (!len1 buf) 1)) exp)
(!line 551)(!assign (!index buf (!add (!len1 buf) 1)) " ")
(!line 552)(!assign pos (!call skip_ws s posn))
(!line 553)(!define (capt posn) ((!callmeth capt_identifier match s pos)))
(!line 554)(!if (!not posn)
(!do
(!line 555)(!call syntaxerror "<name> expected")))
(!line 557)(!assign (!index buf (!add (!len1 buf) 1)) capt)
(!line 558)(!assign (!index buf (!add (!len1 buf) 1)) " ")
(!line 559)(!assign pos (!call skip_ws s posn))
(!line 560)(!assign pos (!call funcargs s pos buf))
(!line 561)(!assign (!index buf (!add (!len1 buf) 1)) ")")
(!line 562)(!assign exp (!call tconcat buf)))(!if (!or (!or (!callmeth1 tok_left_paren match s pos) (!callmeth tok_left_brace match s pos)) (!callmeth tok_string match s pos))
(!do
(!line 564)(!if one
(!do
(!line 565)(!assign (!index buf (!add (!len1 buf) 1)) "(!call1 "))(!do
(!line 567)(!assign (!index buf (!add (!len1 buf) 1)) "(!call ")))
(!line 569)(!assign (!index buf (!add (!len1 buf) 1)) exp)
(!line 570)(!assign (!index buf (!add (!len1 buf) 1)) " ")
(!line 571)(!assign pos (!call funcargs s pos buf))
(!line 572)(!assign (!index buf (!add (!len1 buf) 1)) ")")
(!line 573)(!assign exp (!call tconcat buf)))(!do
(!line 575)(!assign (!index buffer (!add (!len1 buffer) 1)) exp)
(!line 576)(!return pos)))))))))

(!line 582)(!define simpleexpr)(!assign simpleexpr (!lambda (s pos buffer one)
(!line 585)(!define (capt posn) ((!callmeth capt_number match s pos)))
(!line 586)(!if posn
(!do
(!line 587)(!assign (!index buffer (!add (!len1 buffer) 1)) capt)
(!line 588)(!return posn)))
(!line 590)(!massign (capt posn) ((!callmeth capt_string match s pos)))
(!line 591)(!if posn
(!do
(!line 592)(!assign (!index buffer (!add (!len1 buffer) 1)) capt)
(!line 593)(!return posn)))
(!line 595)(!massign (capt posn) ((!callmeth capt_nil match s pos)))
(!line 596)(!if posn
(!do
(!line 597)(!assign (!index buffer (!add (!len1 buffer) 1)) "!nil")
(!line 598)(!return posn)))
(!line 600)(!massign (capt posn) ((!callmeth capt_true match s pos)))
(!line 601)(!if posn
(!do
(!line 602)(!assign (!index buffer (!add (!len1 buffer) 1)) "!true")
(!line 603)(!return posn)))
(!line 605)(!massign (capt posn) ((!callmeth capt_false match s pos)))
(!line 606)(!if posn
(!do
(!line 607)(!assign (!index buffer (!add (!len1 buffer) 1)) "!false")
(!line 608)(!return posn)))
(!line 610)(!massign (capt posn) ((!callmeth capt_vararg match s pos)))
(!line 611)(!if posn
(!do
(!line 612)(!assign (!index buffer (!add (!len1 buffer) 1)) "!vararg")
(!line 613)(!return posn)))
(!line 615)(!if (!callmeth1 tok_left_brace match s pos)
(!do
(!line 616)(!return (!call constructor s pos buffer))))
(!line 618)(!massign (capt posn) ((!callmeth capt_function match s pos)))
(!line 619)(!if posn
(!do
(!line 620)(!assign (!index buffer (!add (!len1 buffer) 1)) "(!lambda ")
(!line 621)(!assign pos (!call skip_ws s posn))
(!line 622)(!return (!call body s pos buffer))))
(!line 624)(!return (!call suffixedexpr s pos buffer one))))

(!line 628)(!define unop ("not": "(!not " "-": "(!neg " "#": "(!len1 " ))
(!line 633)(!define binop ("+": "(!add " "-": "(!sub " "*": "(!mul " "/": "(!div " "%": "(!mod " "^": "(!pow " "..": "(!concat " "~=": "(!ne " "==": "(!eq " "<=": "(!le " "<": "(!lt " ">=": "(!ge " ">": "(!gt " "and": "(!and " "or": "(!or " ))
(!line 650)(!define priority ("+": (!nil 6 6) "-": (!nil 6 6) "*": (!nil 7 7) "/": (!nil 7 7) "%": (!nil 7 7) "^": (!nil 10 9) "..": (!nil 5 4) "~=": (!nil 3 3) "==": (!nil 3 3) "<=": (!nil 3 3) "<": (!nil 3 3) ">=": (!nil 3 3) ">": (!nil 3 3) "and": (!nil 2 2) "or": (!nil 1 1) ))
(!line 670)(!assign expr (!lambda (s pos buffer one limit)
(!line 672)(!assign limit (!or limit 0))
(!line 673)(!define (capt posn) ((!callmeth capt_unopr match s pos)))
(!line 674)(!define buf ())
(!line 675)(!if posn
(!do
(!line 676)(!assign (!index buf (!add (!len1 buf) 1)) (!index unop capt))
(!line 677)(!assign pos (!call skip_ws s posn))
(!line 678)(!assign pos (!call expr s pos buf !false 8))
(!line 679)(!assign (!index buf (!add (!len1 buf) 1)) ")"))(!do
(!line 681)(!assign pos (!call simpleexpr s pos buf one))))
(!line 683)(!define exp (!call tconcat buf))
(!line 684)(!assign pos (!call skip_ws s pos))
(!line 685)(!massign (capt posn) ((!callmeth capt_binopr match s pos)))
(!line 686)(!while (!and posn (!gt (!index (!index priority capt) 1) limit))

(!line 687)(!assign buf (!nil (!index binop capt) exp " "))
(!line 688)(!assign pos (!call skip_ws s posn buf))
(!line 689)(!assign pos (!call expr s pos buf !false (!index (!index priority capt) 2)))
(!line 690)(!assign pos (!call skip_ws s pos))
(!line 691)(!assign (!index buf (!add (!len1 buf) 1)) ")")
(!line 692)(!assign exp (!call tconcat buf))
(!line 693)(!massign (capt posn) ((!callmeth capt_binopr match s pos))))
(!line 695)(!assign (!index buffer (!add (!len1 buffer) 1)) exp)
(!line 696)(!return pos)))

(!line 700)(!define block)(!assign block (!lambda (s pos buffer)
(!line 702)(!define pos (!call statlist s pos buffer))
(!line 703)(!assign (!index buffer (!add (!len1 buffer) 1)) ")")
(!line 704)(!return pos)))

(!line 708)(!define assignment)(!assign assignment (!lambda (s pos buffer n)
(!line 710)(!define (capt posn) ((!callmeth capt_comma match s pos)))
(!line 711)(!if posn
(!do
(!line 712)(!if (!eq n 1)
(!do
(!line 713)(!define var (!index buffer (!len1 buffer)))
(!line 714)(!assign (!index buffer (!len1 buffer)) "(!line ")
(!line 715)(!assign (!index buffer (!add (!len1 buffer) 1)) lineno)
(!line 716)(!assign (!index buffer (!add (!len1 buffer) 1)) ")(!massign (")
(!line 717)(!assign (!index buffer (!add (!len1 buffer) 1)) var)))
(!line 719)(!assign (!index buffer (!add (!len1 buffer) 1)) " ")
(!line 720)(!assign pos (!call skip_ws s posn))
(!line 721)(!assign pos (!call suffixedexpr s pos buffer))
(!line 722)(!assign pos (!call skip_ws s pos))
(!line 723)(!return (!call assignment s pos buffer (!add n 1))))(!do
(!line 726)(!massign (capt posn) ((!callmeth capt_equal match s pos)))
(!line 727)(!if (!not posn)
(!do
(!line 728)(!call syntaxerror "= expected")))
(!line 730)(!if (!eq n 1)
(!do
(!line 731)(!define var (!index buffer (!len1 buffer)))
(!line 732)(!assign (!index buffer (!len1 buffer)) "(!line ")
(!line 733)(!assign (!index buffer (!add (!len1 buffer) 1)) lineno)
(!line 734)(!assign (!index buffer (!add (!len1 buffer) 1)) ")(!assign ")
(!line 735)(!assign (!index buffer (!add (!len1 buffer) 1)) var)
(!line 736)(!assign (!index buffer (!add (!len1 buffer) 1)) " "))(!do
(!line 738)(!assign (!index buffer (!add (!len1 buffer) 1)) ") (")))
(!line 740)(!assign pos (!call skip_ws s posn))
(!line 741)(!assign pos (!call explist s pos buffer))
(!line 742)(!assign (!index buffer (!add (!len1 buffer) 1)) ")")
(!line 743)(!if (!ne n 1)
(!do
(!line 744)(!assign (!index buffer (!add (!len1 buffer) 1)) ")")))
(!line 746)(!return pos)))))

(!line 751)(!define breakstat)(!assign breakstat (!lambda (s pos buffer)
(!line 752)(!define (capt posn) ((!callmeth capt_break match s pos)))
(!line 753)(!call assert posn)
(!line 754)(!assign (!index buffer (!add (!len1 buffer) 1)) "(!line ")
(!line 755)(!assign (!index buffer (!add (!len1 buffer) 1)) lineno)
(!line 756)(!assign (!index buffer (!add (!len1 buffer) 1)) ")(!break)")
(!line 757)(!return posn)))

(!line 761)(!define gotostat)(!assign gotostat (!lambda (s pos buffer)
(!line 762)(!define (capt posn) ((!callmeth capt_goto match s pos)))
(!line 763)(!call assert posn)
(!line 764)(!assign (!index buffer (!add (!len1 buffer) 1)) "(!line ")
(!line 765)(!assign (!index buffer (!add (!len1 buffer) 1)) lineno)
(!line 766)(!assign (!index buffer (!add (!len1 buffer) 1)) ")(!goto ")
(!line 767)(!assign pos (!call skip_ws s posn))
(!line 768)(!massign (capt posn) ((!callmeth capt_identifier match s pos)))
(!line 769)(!if (!not posn)
(!do
(!line 770)(!call syntaxerror "<name> expected")))
(!line 772)(!assign (!index buffer (!add (!len1 buffer) 1)) capt)
(!line 773)(!assign (!index buffer (!add (!len1 buffer) 1)) ")")
(!line 774)(!return posn)))

(!line 778)(!define labelstat)(!assign labelstat (!lambda (s pos buffer)
(!line 780)(!define (capt posn) ((!callmeth capt_identifier match s pos)))
(!line 781)(!if (!not posn)
(!do
(!line 782)(!call syntaxerror "<name> expected")))
(!line 784)(!assign (!index buffer (!add (!len1 buffer) 1)) "(!line ")
(!line 785)(!assign (!index buffer (!add (!len1 buffer) 1)) lineno)
(!line 786)(!assign (!index buffer (!add (!len1 buffer) 1)) ")(!label ")
(!line 787)(!assign (!index buffer (!add (!len1 buffer) 1)) capt)
(!line 788)(!assign (!index buffer (!add (!len1 buffer) 1)) ")")
(!line 789)(!assign pos (!call skip_ws s posn))
(!line 790)(!massign (capt posn) ((!callmeth capt_dbcolon match s pos)))
(!line 791)(!if (!not posn)
(!do
(!line 792)(!call syntaxerror ":: expected")))
(!line 794)(!return posn)))

(!line 798)(!define whilestat)(!assign whilestat (!lambda (s pos buffer)
(!line 800)(!define (capt posn) ((!callmeth capt_while match s pos)))
(!line 801)(!call assert posn)
(!line 802)(!assign (!index buffer (!add (!len1 buffer) 1)) "(!line ")
(!line 803)(!assign (!index buffer (!add (!len1 buffer) 1)) lineno)
(!line 804)(!assign (!index buffer (!add (!len1 buffer) 1)) ")(!while ")
(!line 805)(!assign pos (!call skip_ws s posn))
(!line 806)(!assign pos (!call expr s pos buffer !true))
(!line 807)(!assign (!index buffer (!add (!len1 buffer) 1)) "\x0A")
(!line 808)(!assign pos (!call skip_ws s pos))
(!line 809)(!massign (capt posn) ((!callmeth capt_do match s pos)))
(!line 810)(!if (!not posn)
(!do
(!line 811)(!call syntaxerror "do expected")))
(!line 813)(!assign pos (!call skip_ws s posn))
(!line 814)(!assign pos (!call block s pos buffer))
(!line 815)(!assign pos (!call skip_ws s pos))
(!line 816)(!massign (capt posn) ((!callmeth capt_end match s pos)))
(!line 817)(!if (!not posn)
(!do
(!line 818)(!call syntaxerror "end expected")))
(!line 820)(!return posn)))

(!line 824)(!define repeatstat)(!assign repeatstat (!lambda (s pos buffer)
(!line 826)(!define (capt posn) ((!callmeth capt_repeat match s pos)))
(!line 827)(!call assert posn)
(!line 828)(!assign (!index buffer (!add (!len1 buffer) 1)) "(!line ")
(!line 829)(!assign (!index buffer (!add (!len1 buffer) 1)) lineno)
(!line 830)(!assign (!index buffer (!add (!len1 buffer) 1)) ")(!repeat")
(!line 831)(!assign pos (!call skip_ws s posn))
(!line 832)(!assign pos (!call statlist s pos buffer))
(!line 833)(!assign pos (!call skip_ws s pos))
(!line 834)(!massign (capt posn) ((!callmeth capt_until match s pos)))
(!line 835)(!if (!not posn)
(!do
(!line 836)(!call syntaxerror "until expected")))
(!line 838)(!assign pos (!call skip_ws s posn))
(!line 839)(!assign (!index buffer (!add (!len1 buffer) 1)) "\x0A")
(!line 840)(!assign pos (!call expr s pos buffer !true))
(!line 841)(!assign (!index buffer (!add (!len1 buffer) 1)) ")")
(!line 842)(!return pos)))

(!line 846)(!define forbody)(!assign forbody (!lambda (s pos buffer name)
(!line 848)(!assign (!index buffer (!add (!len1 buffer) 1)) "\x0A")
(!line 849)(!define (capt posn) ((!callmeth capt_do match s pos)))
(!line 850)(!if (!not posn)
(!do
(!line 851)(!call syntaxerror "do expected")))
(!line 853)(!if name
(!do
(!line 854)(!assign (!index buffer (!add (!len1 buffer) 1)) "(!define ")
(!line 855)(!assign (!index buffer (!add (!len1 buffer) 1)) name)
(!line 856)(!assign (!index buffer (!add (!len1 buffer) 1)) " ")
(!line 857)(!assign (!index buffer (!add (!len1 buffer) 1)) name)
(!line 858)(!assign (!index buffer (!add (!len1 buffer) 1)) ")")))
(!line 860)(!assign pos (!call skip_ws s posn))
(!line 861)(!return (!call block s pos buffer))))

(!line 865)(!define fornum)(!assign fornum (!lambda (s pos buffer name)
(!line 867)(!define (capt posn) ((!callmeth capt_equal match s pos)))
(!line 868)(!if (!not posn)
(!do
(!line 869)(!call syntaxerror "= expected")))
(!line 871)(!assign (!index buffer (!add (!len1 buffer) 1)) "(!line ")
(!line 872)(!assign (!index buffer (!add (!len1 buffer) 1)) lineno)
(!line 873)(!assign (!index buffer (!add (!len1 buffer) 1)) ")(!loop ")
(!line 874)(!assign (!index buffer (!add (!len1 buffer) 1)) name)
(!line 875)(!assign (!index buffer (!add (!len1 buffer) 1)) " ")
(!line 876)(!assign pos (!call skip_ws s posn))
(!line 877)(!assign pos (!call expr s pos buffer !true))
(!line 878)(!massign (capt posn) ((!callmeth capt_comma match s pos)))
(!line 879)(!if (!not posn)
(!do
(!line 880)(!call syntaxerror ", expected")))
(!line 882)(!assign (!index buffer (!add (!len1 buffer) 1)) " ")
(!line 883)(!assign pos (!call skip_ws s posn))
(!line 884)(!assign pos (!call expr s pos buffer !true))
(!line 885)(!massign (capt posn) ((!callmeth capt_comma match s pos)))
(!line 886)(!if posn
(!do
(!line 887)(!assign (!index buffer (!add (!len1 buffer) 1)) " ")
(!line 888)(!assign pos (!call skip_ws s posn))
(!line 889)(!assign pos (!call expr s pos buffer !true)))(!do
(!line 891)(!assign (!index buffer (!add (!len1 buffer) 1)) " 1 ")))
(!line 893)(!return (!call forbody s pos buffer name))))

(!line 897)(!define forlist)(!assign forlist (!lambda (s pos buffer name1)
(!line 899)(!assign (!index buffer (!add (!len1 buffer) 1)) "(!line ")
(!line 900)(!assign (!index buffer (!add (!len1 buffer) 1)) lineno)
(!line 901)(!assign (!index buffer (!add (!len1 buffer) 1)) ")(!for (")
(!line 902)(!assign (!index buffer (!add (!len1 buffer) 1)) name1)
(!line 903)(!define (capt posn) ((!callmeth capt_comma match s pos)))
(!line 904)(!while posn

(!line 905)(!assign (!index buffer (!add (!len1 buffer) 1)) " ")
(!line 906)(!assign pos (!call skip_ws s posn))
(!line 907)(!define (capt posnn) ((!callmeth capt_identifier match s pos)))
(!line 908)(!if (!not posnn)
(!do
(!line 909)(!call syntaxerror "<name> expected")))
(!line 911)(!assign (!index buffer (!add (!len1 buffer) 1)) capt)
(!line 912)(!assign pos (!call skip_ws s posnn))
(!line 913)(!massign (capt posn) ((!callmeth capt_comma match s pos))))
(!line 915)(!massign (capt posn) ((!callmeth capt_in match s pos)))
(!line 916)(!if (!not posn)
(!do
(!line 917)(!call syntaxerror "in expected")))
(!line 919)(!assign (!index buffer (!add (!len1 buffer) 1)) ") (")
(!line 920)(!assign pos (!call skip_ws s posn))
(!line 921)(!assign pos (!call explist s pos buffer))
(!line 922)(!assign (!index buffer (!add (!len1 buffer) 1)) ")")
(!line 923)(!return (!call forbody s pos buffer))))

(!line 927)(!define forstat)(!assign forstat (!lambda (s pos buffer)
(!line 929)(!define (capt posn) ((!callmeth capt_for match s pos)))
(!line 930)(!call assert posn)
(!line 931)(!assign pos (!call skip_ws s posn))
(!line 932)(!massign (capt posn) ((!callmeth capt_identifier match s pos)))
(!line 933)(!if (!not posn)
(!do
(!line 934)(!call syntaxerror "<name> expected")))
(!line 936)(!assign pos (!call skip_ws s posn))
(!line 937)(!if (!callmeth1 tok_equal match s pos)
(!do
(!line 938)(!assign pos (!call fornum s pos buffer capt)))(!if (!or (!callmeth1 tok_comma match s pos) (!callmeth tok_in match s pos))
(!do
(!line 940)(!assign pos (!call forlist s pos buffer capt)))(!do
(!line 942)(!call syntaxerror "'=' or 'in' expected"))))
(!line 944)(!assign pos (!call skip_ws s pos))
(!line 945)(!massign (capt posn) ((!callmeth capt_end match s pos)))
(!line 946)(!if (!not posn)
(!do
(!line 947)(!call syntaxerror "end expected")))
(!line 949)(!return posn)))

(!line 953)(!define test_then_block)(!assign test_then_block (!lambda (s pos buffer)
(!line 955)(!define (capt posn) ((!callmeth capt_if match s pos)))
(!line 956)(!if (!not posn)
(!do
(!line 957)(!massign (capt posn) ((!callmeth capt_elseif match s pos)))
(!line 958)(!call assert posn)))
(!line 960)(!assign (!index buffer (!add (!len1 buffer) 1)) "(!if ")
(!line 961)(!assign pos (!call skip_ws s posn))
(!line 962)(!assign pos (!call expr s pos buffer !true))
(!line 963)(!assign (!index buffer (!add (!len1 buffer) 1)) "\x0A")
(!line 964)(!assign pos (!call skip_ws s pos))
(!line 965)(!massign (capt posn) ((!callmeth capt_then match s pos)))
(!line 966)(!if (!not posn)
(!do
(!line 967)(!call syntaxerror "then expected")))
(!line 969)(!assign (!index buffer (!add (!len1 buffer) 1)) "(!do")
(!line 970)(!assign pos (!call skip_ws s posn))
(!line 971)(!return (!call block s pos buffer))))

(!line 974)(!define ifstat)(!assign ifstat (!lambda (s pos buffer)
(!line 976)(!assign (!index buffer (!add (!len1 buffer) 1)) "(!line ")
(!line 977)(!assign (!index buffer (!add (!len1 buffer) 1)) lineno)
(!line 978)(!assign (!index buffer (!add (!len1 buffer) 1)) ")")
(!line 979)(!assign pos (!call test_then_block s pos buffer))
(!line 980)(!define n 1)
(!line 981)(!while (!callmeth1 tok_elseif match s pos)

(!line 982)(!assign pos (!call test_then_block s pos buffer))
(!line 983)(!assign n (!add n 1)))
(!line 985)(!define (capt posn) ((!callmeth capt_else match s pos)))
(!line 986)(!if posn
(!do
(!line 987)(!assign (!index buffer (!add (!len1 buffer) 1)) "(!do")
(!line 988)(!assign pos (!call skip_ws s posn))
(!line 989)(!assign pos (!call block s pos buffer))))
(!line 991)(!massign (capt posn) ((!callmeth capt_end match s pos)))
(!line 992)(!if (!not posn)
(!do
(!line 993)(!call syntaxerror "end expected")))
(!line 995)(!loop i 1 n 1
(!define i i)
(!line 996)(!assign (!index buffer (!add (!len1 buffer) 1)) ")"))
(!line 998)(!return posn)))

(!line 1002)(!define localfunc)(!assign localfunc (!lambda (s pos buffer)
(!line 1003)(!define (capt posn) ((!callmeth capt_function match s pos)))
(!line 1004)(!call assert posn)
(!line 1005)(!assign pos (!call skip_ws s posn))
(!line 1006)(!massign (capt posn) ((!callmeth capt_identifier match s pos)))
(!line 1007)(!if (!not posn)
(!do
(!line 1008)(!call syntaxerror "<name> expected")))
(!line 1010)(!assign (!index buffer (!add (!len1 buffer) 1)) "(!line ")
(!line 1011)(!assign (!index buffer (!add (!len1 buffer) 1)) lineno)
(!line 1012)(!assign (!index buffer (!add (!len1 buffer) 1)) ")(!define ")
(!line 1013)(!assign (!index buffer (!add (!len1 buffer) 1)) capt)
(!line 1014)(!assign (!index buffer (!add (!len1 buffer) 1)) ")(!assign ")
(!line 1015)(!assign (!index buffer (!add (!len1 buffer) 1)) capt)
(!line 1016)(!assign (!index buffer (!add (!len1 buffer) 1)) " (!lambda ")
(!line 1017)(!assign pos (!call skip_ws s posn))
(!line 1018)(!assign pos (!call body s pos buffer))
(!line 1019)(!assign (!index buffer (!add (!len1 buffer) 1)) ")\x0A")
(!line 1020)(!return pos)))

(!line 1024)(!define localstat)(!assign localstat (!lambda (s pos buffer)
(!line 1026)(!assign (!index buffer (!add (!len1 buffer) 1)) "(!line ")
(!line 1027)(!assign (!index buffer (!add (!len1 buffer) 1)) lineno)
(!line 1028)(!assign (!index buffer (!add (!len1 buffer) 1)) ")(!define ")
(!line 1029)(!define multi !false)
(!line 1030)(!define (capt posn))
(!line 1031)(!repeat
(!line 1032)(!massign (capt posn) ((!callmeth capt_identifier match s pos)))
(!line 1033)(!if (!not pos)
(!do
(!line 1034)(!call syntaxerror "<name> expected")))
(!line 1036)(!define ident capt)
(!line 1037)(!assign (!index buffer (!add (!len1 buffer) 1)) ident)
(!line 1038)(!assign pos (!call skip_ws s posn))
(!line 1039)(!massign (capt posn) ((!callmeth capt_comma match s pos)))
(!line 1040)(!if posn
(!do
(!line 1041)(!if (!not multi)
(!do
(!line 1042)(!assign multi !true)
(!line 1043)(!assign (!index buffer (!len1 buffer)) "(")
(!line 1044)(!assign (!index buffer (!add (!len1 buffer) 1)) ident)))
(!line 1046)(!assign (!index buffer (!add (!len1 buffer) 1)) " ")
(!line 1047)(!assign pos (!call skip_ws s posn))))
(!not posn))
(!line 1050)(!if multi
(!do
(!line 1051)(!assign (!index buffer (!add (!len1 buffer) 1)) ")")))
(!line 1053)(!massign (capt posn) ((!callmeth capt_equal match s pos)))
(!line 1054)(!if posn
(!do
(!line 1055)(!assign (!index buffer (!add (!len1 buffer) 1)) " ")
(!line 1056)(!if multi
(!do
(!line 1057)(!assign (!index buffer (!add (!len1 buffer) 1)) "(")))
(!line 1059)(!assign pos (!call skip_ws s posn buffer))
(!line 1060)(!assign pos (!call explist s pos buffer))
(!line 1061)(!if multi
(!do
(!line 1062)(!assign (!index buffer (!add (!len1 buffer) 1)) ")")))))
(!line 1065)(!assign (!index buffer (!add (!len1 buffer) 1)) ")")
(!line 1066)(!return pos)))

(!line 1070)(!define funcname)(!assign funcname (!lambda (s pos buffer)
(!line 1072)(!define (exp posn) ((!callmeth capt_identifier match s pos)))
(!line 1073)(!if (!not posn)
(!do
(!line 1074)(!call syntaxerror "identifier expected")))
(!line 1076)(!assign pos (!call skip_ws s posn))
(!line 1077)(!assign posn (!callmeth tok_dot match s pos))
(!line 1078)(!while posn

(!line 1079)(!define buf (!nil "(!index " exp " "))
(!line 1080)(!assign pos (!call fieldsel s pos buf))
(!line 1081)(!assign (!index buf (!add (!len1 buf) 1)) ")")
(!line 1082)(!assign exp (!call tconcat buf))
(!line 1083)(!assign pos (!call skip_ws s pos))
(!line 1084)(!assign posn (!callmeth tok_dot match s pos)))
(!line 1086)(!assign posn (!callmeth tok_colon match s pos))
(!line 1087)(!if posn
(!do
(!line 1088)(!define buf (!nil "(!index " exp " "))
(!line 1089)(!assign pos (!call fieldsel s pos buf))
(!line 1090)(!assign (!index buf (!add (!len1 buf) 1)) ")")
(!line 1091)(!assign exp (!call tconcat buf))
(!line 1092)(!assign pos (!call skip_ws s pos))))
(!line 1094)(!assign (!index buffer (!add (!len1 buffer) 1)) exp)
(!line 1095)(!return pos posn)))

(!line 1099)(!define funcstat)(!assign funcstat (!lambda (s pos buffer)
(!line 1101)(!define (capt posn) ((!callmeth capt_function match s pos)))
(!line 1102)(!call assert posn)
(!line 1103)(!assign pos (!call skip_ws s posn))
(!line 1104)(!assign (!index buffer (!add (!len1 buffer) 1)) "(!line ")
(!line 1105)(!assign (!index buffer (!add (!len1 buffer) 1)) lineno)
(!line 1106)(!assign (!index buffer (!add (!len1 buffer) 1)) ")(!assign ")
(!line 1107)(!define (posn ismethod) ((!call funcname s pos buffer)))
(!line 1108)(!assign (!index buffer (!add (!len1 buffer) 1)) " (!lambda ")
(!line 1109)(!assign pos (!call skip_ws s posn))
(!line 1110)(!assign pos (!call body s pos buffer ismethod))
(!line 1111)(!assign (!index buffer (!add (!len1 buffer) 1)) ")\x0A")
(!line 1112)(!return pos)))

(!line 1116)(!define exprstat)(!assign exprstat (!lambda (s pos buffer)
(!line 1118)(!define buf ())
(!line 1119)(!define lineno lineno)
(!line 1120)(!assign pos (!call suffixedexpr s pos buf))
(!line 1121)(!assign pos (!call skip_ws s pos))
(!line 1122)(!if (!or (!callmeth1 tok_equal match s pos) (!callmeth tok_comma match s pos))
(!do
(!line 1123)(!assign (!index buffer (!add (!len1 buffer) 1)) (!call tconcat buf))
(!line 1124)(!return (!call assignment s pos buffer 1)))(!do
(!line 1126)(!assign (!index buffer (!add (!len1 buffer) 1)) "(!line ")
(!line 1127)(!assign (!index buffer (!add (!len1 buffer) 1)) lineno)
(!line 1128)(!assign (!index buffer (!add (!len1 buffer) 1)) ")")
(!line 1129)(!assign (!index buffer (!add (!len1 buffer) 1)) (!call tconcat buf))
(!line 1130)(!return pos)))))

(!line 1135)(!define retstat)(!assign retstat (!lambda (s pos buffer)
(!line 1137)(!assign (!index buffer (!add (!len1 buffer) 1)) "(!line ")
(!line 1138)(!assign (!index buffer (!add (!len1 buffer) 1)) lineno)
(!line 1139)(!assign (!index buffer (!add (!len1 buffer) 1)) ")(!return ")
(!line 1140)(!if (!and (!not (!call block_follow s pos !true)) (!not (!callmeth tok_semicolon match s pos)))
(!do
(!line 1141)(!assign pos (!call explist s pos buffer))))
(!line 1143)(!assign (!index buffer (!add (!len1 buffer) 1)) ")")
(!line 1144)(!define (capt posn) ((!callmeth capt_semicolon match s pos)))
(!line 1145)(!if posn
(!do
(!line 1146)(!return posn)))
(!line 1148)(!return pos)))

(!line 1152)(!assign statement (!lambda (s pos buffer)
(!line 1154)(!assign pos (!call skip_ws s pos))
(!line 1155)(!define (capt posn) ((!callmeth capt_semicolon match s pos)))
(!line 1156)(!if posn
(!do
(!line 1157)(!return posn)))
(!line 1160)(!if (!callmeth1 tok_if match s pos)
(!do
(!line 1161)(!return (!call ifstat s pos buffer))))
(!line 1164)(!if (!callmeth1 tok_while match s pos)
(!do
(!line 1165)(!return (!call whilestat s pos buffer))))
(!line 1168)(!massign (capt posn) ((!callmeth capt_do match s pos)))
(!line 1169)(!if posn
(!do
(!line 1170)(!assign (!index buffer (!add (!len1 buffer) 1)) "(!line ")
(!line 1171)(!assign (!index buffer (!add (!len1 buffer) 1)) lineno)
(!line 1172)(!assign (!index buffer (!add (!len1 buffer) 1)) ")(!do")
(!line 1173)(!assign pos (!call block s posn buffer))
(!line 1174)(!massign (capt posn) ((!callmeth capt_end match s pos)))
(!line 1175)(!if posn
(!do
(!line 1176)(!return posn))(!do
(!line 1178)(!call syntaxerror "'end' expected")))))
(!line 1182)(!if (!callmeth1 tok_for match s pos)
(!do
(!line 1183)(!return (!call forstat s pos buffer))))
(!line 1186)(!if (!callmeth1 tok_repeat match s pos)
(!do
(!line 1187)(!return (!call repeatstat s pos buffer))))
(!line 1190)(!if (!callmeth1 tok_function match s pos)
(!do
(!line 1191)(!return (!call funcstat s pos buffer))))
(!line 1194)(!massign (capt posn) ((!callmeth capt_local match s pos)))
(!line 1195)(!if posn
(!do
(!line 1196)(!assign pos (!call skip_ws s posn))
(!line 1197)(!if (!callmeth1 tok_function match s pos)
(!do
(!line 1198)(!return (!call localfunc s pos buffer)))(!do
(!line 1200)(!return (!call localstat s pos buffer))))))
(!line 1204)(!massign (capt posn) ((!callmeth capt_dbcolon match s pos)))
(!line 1205)(!if posn
(!do
(!line 1206)(!assign pos (!call skip_ws s posn))
(!line 1207)(!return (!call labelstat s pos buffer))))
(!line 1210)(!massign (capt posn) ((!callmeth capt_return match s pos)))
(!line 1211)(!if posn
(!do
(!line 1212)(!assign pos (!call skip_ws s posn))
(!line 1213)(!return (!call retstat s pos buffer))))
(!line 1216)(!if (!callmeth1 tok_break match s pos)
(!do
(!line 1217)(!return (!call breakstat s pos buffer))))
(!line 1220)(!if (!callmeth1 tok_goto match s pos)
(!do
(!line 1221)(!return (!call gotostat s pos buffer))))
(!line 1224)(!return (!call exprstat s pos buffer))))

(!line 1228)(!define translate)(!assign translate (!lambda (s fname)
(!line 1229)(!if (!callmeth1 bytecode match s)
(!do
(!line 1230)(!return s)))
(!line 1232)(!define pos (!or (!callmeth (!mul bom (!call Cp )) match s 1) 1))
(!line 1233)(!assign pos (!or (!callmeth (!mul shebang (!call Cp )) match s pos) pos))
(!line 1234)(!assign lineno 1)
(!line 1235)(!define buffer (!nil "(!line " (!call quote fname) " " lineno ")"))
(!line 1236)(!assign pos (!call statlist s pos buffer))
(!line 1237)(!if (!not (!callmeth (!call P (!neg 1)) match s pos))
(!do
(!line 1238)(!call syntaxerror (!concat "<eof> expected at " pos))))
(!line 1240)(!assign (!index buffer (!add (!len1 buffer) 1)) "\x0A; end of generation")
(!line 1241)(!return (!call tconcat buffer))))

(!line 1244)(!assign (!index _G "_COMPILER") translate)
(!line 1246)(!define fname (!and arg (!index arg 1)))
(!line 1247)(!if fname
(!do
(!line 1248)(!define (f msg) ((!call (!index (!index _G "io") "open") fname "r")))
(!line 1249)(!if (!not f)
(!do
(!line 1250)(!call error msg)))
(!line 1252)(!define s (!callmeth f read "*a"))
(!line 1253)(!callmeth f close )
(!line 1254)(!define code (!call translate s (!concat "@" fname)))
(!line 1255)(!call print "; bootstrap")
(!line 1256)(!call print code)))
; end of generation
