; bootstrap
(!line "@lua/lunokhod.lua" 1)
(!line 7)(!define _G _G)
(!line 8)(!define arg arg)
(!line 9)(!define assert assert)
(!line 10)(!define char (!index string "char"))
(!line 11)(!define error error)
(!line 12)(!define _find (!index string "find"))
(!line 13)(!define format (!index string "format"))
(!line 14)(!define quote (!index tvm "quote"))
(!line 15)(!define setmetatable setmetatable)
(!line 16)(!define sub (!index string "sub"))
(!line 17)(!define tconcat (!index table "concat"))
(!line 18)(!define tonumber tonumber)
(!line 20)(!define find)(!assign find (!lambda (s patt)
(!line 21)(!return (!and (!ne patt "") (!call _find s patt 1 !true)))))

(!line 24)(!define digit "0123456789")
(!line 25)(!define xdigit (!concat "ABCDEF" (!concat "abcdef" digit)))
(!line 27)(!define alpha (!concat "ABCDEFGHIJKLMNOPQRSTUVWXYZ" (!concat "abcdefghijklmnopqrstuvwxyz" "_")))
(!line 29)(!define alnum (!concat alpha digit))
(!line 30)(!define newline "\x0A\x0D")
(!line 31)(!define space " \x0C\x09\x0B\x0A\x0D")
(!line 33)(!define tokens ("and": !true "break": !true "do": !true "else": !true "elseif": !true "end": !true "false": !true "for": !true "function": !true "goto": !true "if": !true "in": !true "local": !true "nil": !true "not": !true "or": !true "repeat": !true "return": !true "then": !true "true": !true "until": !true "while": !true ))
(!line 58)(!define L ())
(!line 60)(!assign (!index L "_resetbuffer") (!lambda (self)
(!line 61)(!assign (!index self "buff") ())))

(!line 64)(!assign (!index L "_next") (!lambda (self)
(!line 65)(!assign (!index self "pos") (!add (!index self "pos") 1))
(!line 66)(!assign (!index self "current") (!call sub (!index self "z") (!index self "pos") (!index self "pos")))
(!line 67)(!return (!index self "current"))))

(!line 70)(!assign (!index L "_save_and_next") (!lambda (self)
(!line 71)(!callmeth self _save (!index self "current"))
(!line 72)(!callmeth self _next )))

(!line 75)(!assign (!index L "_save") (!lambda (self c)
(!line 76)(!assign (!index (!index self "buff") (!add (!len (!index self "buff")) 1)) c)))

(!line 79)(!assign (!index L "_txtToken") (!lambda (self token)
(!line 80)(!if (!or (!or (!eq token "<name>") (!eq token "<string>")) (!eq token "<number>"))
(!do
(!line 83)(!return (!call tconcat (!index self "buff"))))(!if (!eq token "")
(!do
(!line 85)(!return "<eof>"))(!do
(!line 87)(!return token))))))

(!line 91)(!define chunkid)(!assign chunkid (!lambda (source max)
(!line 92)(!define first (!call sub source 1 1))
(!line 93)(!if (!eq first "=")
(!do
(!line 94)(!return (!call sub source 2 (!add 1 max))))(!if (!eq first "@")
(!do
(!line 96)(!if (!le (!len source) max)
(!do
(!line 97)(!return (!call sub source 2)))(!do
(!line 99)(!return (!concat "..." (!call sub source (!neg max)))))))(!do
(!line 102)(!assign source (!call sub source 1 (!sub (!call find source "\x0A") 1)))
(!line 103)(!assign source (!or (!and (!lt (!len source) (!sub max 11)) source) (!concat (!call sub source 1 (!sub max 14)) "...")))
(!line 104)(!return (!concat "[string \"" (!concat source "\"]"))))))))

(!line 108)(!assign (!index L "_lexerror") (!lambda (self msg token)
(!line 109)(!assign msg (!call format "%s:%d: %s" (!call chunkid (!index self "source") 60) (!index self "linenumber") msg))
(!line 110)(!if token
(!do
(!line 111)(!assign msg (!call format "%s near %s" msg (!callmeth self _txtToken token)))))
(!line 113)(!call error msg)))

(!line 116)(!assign (!index L "syntaxerror") (!lambda (self msg)
(!line 117)(!callmeth self _lexerror msg (!index (!index self "t") "token"))))

(!line 120)(!assign (!index L "_inclinenumber") (!lambda (self)
(!line 121)(!define old (!index self "current"))
(!line 122)(!call assert (!call find newline (!index self "current")))
(!line 123)(!callmeth self _next )
(!line 124)(!if (!and (!call1 find newline (!index self "current")) (!ne (!index self "current") old))
(!do
(!line 125)(!callmeth self _next )))
(!line 127)(!assign (!index self "linenumber") (!add (!index self "linenumber") 1))))

(!line 130)(!assign (!index L "setinput") (!lambda (self z source)
(!line 131)(!assign (!index self "_lookahead") ("token": ""))
(!line 132)(!assign (!index self "t") ("token": ""))
(!line 133)(!assign (!index self "z") z)
(!line 134)(!assign (!index self "linenumber") 1)
(!line 135)(!assign (!index self "lastline") 1)
(!line 136)(!assign (!index self "source") source)
(!line 137)(!assign (!index self "buff") ())
(!line 138)(!assign (!index self "pos") 0)
(!line 139)(!callmeth self _next )))

(!line 148)(!assign (!index L "_check_next") (!lambda (self set)
(!line 149)(!if (!not (!call find set (!index self "current")))
(!do
(!line 150)(!return !false)))
(!line 152)(!callmeth self _save_and_next )
(!line 153)(!return !true)))

(!line 156)(!assign (!index L "_read_numeral") (!lambda (self tok)
(!line 157)(!define expo "Ee")
(!line 158)(!define first (!index self "current"))
(!line 159)(!call assert (!call find digit (!index self "current")))
(!line 160)(!callmeth self _save_and_next )
(!line 161)(!if (!and (!eq first "0") (!callmeth self _check_next "Xx"))
(!do
(!line 162)(!assign expo "Pp")))
(!line 164)(!while !true

(!line 165)(!if (!callmeth1 self _check_next expo)
(!do
(!line 166)(!callmeth self _check_next "+-"))(!if (!or (!call1 find xdigit (!index self "current")) (!eq (!index self "current") "."))
(!do
(!line 168)(!callmeth self _save_and_next ))(!do
(!line 170)(!break)))))
(!line 173)(!assign (!index tok "seminfo") (!call tconcat (!index self "buff")))
(!line 174)(!if (!not (!call tonumber (!index tok "seminfo")))
(!do
(!line 175)(!callmeth self _lexerror "malformed number" "<number>")))))

(!line 179)(!assign (!index L "_skip_sep") (!lambda (self)
(!line 180)(!define count 0)
(!line 181)(!define s (!index self "current"))
(!line 182)(!call assert (!or (!eq s "[") (!eq s "]")))
(!line 183)(!callmeth self _save_and_next )
(!line 184)(!while (!eq (!index self "current") "=")

(!line 185)(!callmeth self _save_and_next )
(!line 186)(!assign count (!add count 1)))
(!line 188)(!return (!or (!and (!eq (!index self "current") s) count) (!sub (!neg count) 1)))))

(!line 191)(!assign (!index L "_read_long_string") (!lambda (self tok sep)
(!line 192)(!callmeth self _save_and_next )
(!line 193)(!if (!call1 find newline (!index self "current"))
(!do
(!line 194)(!callmeth self _inclinenumber )))
(!line 196)(!while !true

(!line 197)(!if (!eq (!index self "current") "")
(!do
(!line 198)(!callmeth self _lexerror (!or (!and tok "unfinished long string") "unfinished long comment") ""))(!if (!eq (!index self "current") "]")
(!do
(!line 200)(!if (!eq (!callmeth1 self _skip_sep ) sep)
(!do
(!line 201)(!callmeth self _save_and_next )
(!line 202)(!break))))(!if (!or (!eq (!index self "current") "\x0A") (!eq (!index self "current") "\x0D"))
(!do
(!line 205)(!callmeth self _save "\x0A")
(!line 206)(!callmeth self _inclinenumber )
(!line 207)(!if (!not tok)
(!do
(!line 208)(!callmeth self _resetbuffer ))))(!do
(!line 211)(!if tok
(!do
(!line 212)(!callmeth self _save_and_next ))(!do
(!line 214)(!callmeth self _next ))))))))
(!line 218)(!if tok
(!do
(!line 219)(!assign (!index tok "seminfo") (!call sub (!call tconcat (!index self "buff")) (!add 3 sep) (!sub (!neg 3) sep)))))))

(!line 223)(!assign (!index L "_escerror") (!lambda (self c msg)
(!line 224)(!callmeth self _resetbuffer )
(!line 225)(!callmeth self _save c)
(!line 226)(!callmeth self _lexerror msg "<string>")))

(!line 229)(!assign (!index L "_readhexaesc") (!lambda (self)
(!line 230)(!define r "")
(!line 231)(!loop i 1 2 1 
(!define i i)
(!line 232)(!define c (!callmeth self _next ))
(!line 233)(!assign r (!concat r c))
(!line 234)(!if (!not (!call find xdigit c))
(!do
(!line 235)(!callmeth self _escerror (!concat "x" r) "hexadecimal digit expected"))))
(!line 238)(!return (!call char (!call tonumber r 16)))))

(!line 241)(!assign (!index L "_readdecesc") (!lambda (self)
(!line 242)(!define r "")
(!line 243)(!loop i 1 3 1 
(!define i i)
(!line 244)(!define c (!index self "current"))
(!line 245)(!if (!not (!call find digit c))
(!do
(!line 246)(!break)))
(!line 248)(!assign r (!concat r c))
(!line 249)(!callmeth self _next ))
(!line 251)(!assign r (!call tonumber r))
(!line 252)(!if (!gt r 255)
(!do
(!line 253)(!callmeth self _escerror err "decimal escape too large")))
(!line 255)(!return (!call char r))))

(!line 258)(!assign (!index L "_read_string") (!lambda (self del tok)
(!line 259)(!callmeth self _save_and_next )
(!line 260)(!while (!ne (!index self "current") del)

(!line 261)(!if (!eq (!index self "current") "")
(!do
(!line 262)(!callmeth self _lexerror "unfinished string" ""))(!if (!or (!eq (!index self "current") "\x0A") (!eq (!index self "current") "\x0D"))
(!do
(!line 265)(!callmeth self _lexerror "unfinished string" "<string>"))(!if (!eq (!index self "current") "\\")
(!do
(!line 267)(!callmeth self _next )
(!line 268)(!if (!eq (!index self "current") "a")
(!do
(!line 269)(!callmeth self _next )
(!line 270)(!callmeth self _save "\x07"))(!if (!eq (!index self "current") "b")
(!do
(!line 272)(!callmeth self _next )
(!line 273)(!callmeth self _save "\x08"))(!if (!eq (!index self "current") "f")
(!do
(!line 275)(!callmeth self _next )
(!line 276)(!callmeth self _save "\x0C"))(!if (!eq (!index self "current") "n")
(!do
(!line 278)(!callmeth self _next )
(!line 279)(!callmeth self _save "\x0A"))(!if (!eq (!index self "current") "r")
(!do
(!line 281)(!callmeth self _next )
(!line 282)(!callmeth self _save "\x0D"))(!if (!eq (!index self "current") "t")
(!do
(!line 284)(!callmeth self _next )
(!line 285)(!callmeth self _save "\x09"))(!if (!eq (!index self "current") "v")
(!do
(!line 287)(!callmeth self _next )
(!line 288)(!callmeth self _save "\x0B"))(!if (!eq (!index self "current") "x")
(!do
(!line 290)(!define c (!callmeth self _readhexaesc ))
(!line 291)(!callmeth self _next )
(!line 292)(!callmeth self _save c))(!if (!or (!eq (!index self "current") "\x0A") (!eq (!index self "current") "\x0D"))
(!do
(!line 295)(!callmeth self _inclinenumber )
(!line 296)(!callmeth self _save "\x0A"))(!if (!eq (!index self "current") "\\")
(!do
(!line 298)(!callmeth self _next )
(!line 299)(!callmeth self _save "\\"))(!if (!eq (!index self "current") "\"")
(!do
(!line 301)(!callmeth self _next )
(!line 302)(!callmeth self _save "\""))(!if (!eq (!index self "current") "'")
(!do
(!line 304)(!callmeth self _next )
(!line 305)(!callmeth self _save "'"))(!if (!eq (!index self "current") "")
(!do)(!if (!eq (!index self "current") "z")
(!do
(!line 309)(!callmeth self _next )
(!line 310)(!while (!call1 find space (!index self "current"))

(!line 311)(!if (!call1 find newline (!index self "current"))
(!do
(!line 312)(!callmeth self _inclinenumber ))(!do
(!line 314)(!callmeth self _next )))))(!do
(!line 318)(!if (!not (!call find digit (!index self "current")))
(!do
(!line 319)(!callmeth self _escerror (!index self "current") "invalid escape sequence")))
(!line 321)(!callmeth self _save (!callmeth self _readdecesc ))))))))))))))))))(!do
(!line 324)(!callmeth self _save_and_next ))))))
(!line 327)(!callmeth self _save_and_next )
(!line 328)(!assign (!index tok "seminfo") (!call sub (!call tconcat (!index self "buff")) 2 (!neg 2)))))

(!line 331)(!assign (!index L "_llex") (!lambda (self tok)
(!line 332)(!callmeth self _resetbuffer )
(!line 333)(!while !true

(!line 334)(!if (!or (!eq (!index self "current") "\x0A") (!eq (!index self "current") "\x0D"))
(!do
(!line 336)(!callmeth self _inclinenumber ))(!if (!or (!or (!or (!eq (!index self "current") " ") (!eq (!index self "current") "\x0C")) (!eq (!index self "current") "\x09")) (!eq (!index self "current") "\x0B"))
(!do
(!line 341)(!callmeth self _next ))(!if (!eq (!index self "current") "-")
(!do
(!line 343)(!callmeth self _next )
(!line 344)(!if (!ne (!index self "current") "-")
(!do
(!line 345)(!return "-")))
(!line 347)(!callmeth self _next )
(!line 348)(!if (!eq (!index self "current") "[")
(!do
(!line 349)(!define sep (!callmeth self _skip_sep ))
(!line 350)(!callmeth self _resetbuffer )
(!line 351)(!if (!ge sep 0)
(!do
(!line 352)(!callmeth self _read_long_string !nil sep)
(!line 353)(!callmeth self _resetbuffer ))(!do
(!line 355)(!while (!not (!call find newline (!index self "current")))

(!line 356)(!callmeth self _next )))))(!do
(!line 360)(!while (!not (!call find newline (!index self "current")))

(!line 361)(!callmeth self _next )))))(!if (!eq (!index self "current") "[")
(!do
(!line 365)(!define sep (!callmeth self _skip_sep ))
(!line 366)(!if (!ge sep 0)
(!do
(!line 367)(!callmeth self _read_long_string tok sep)
(!line 368)(!return "<string>"))(!if (!eq sep (!neg 1))
(!do
(!line 370)(!return "["))(!do
(!line 372)(!callmeth self _lexerror "invalid long string delimiter" "<string>")))))(!if (!eq (!index self "current") "=")
(!do
(!line 375)(!callmeth self _next )
(!line 376)(!if (!ne (!index self "current") "=")
(!do
(!line 377)(!return "="))(!do
(!line 379)(!callmeth self _next )
(!line 380)(!return "=="))))(!if (!eq (!index self "current") "<")
(!do
(!line 383)(!callmeth self _next )
(!line 384)(!if (!ne (!index self "current") "=")
(!do
(!line 385)(!return "<"))(!do
(!line 387)(!callmeth self _next )
(!line 388)(!return "<="))))(!if (!eq (!index self "current") ">")
(!do
(!line 391)(!callmeth self _next )
(!line 392)(!if (!ne (!index self "current") "=")
(!do
(!line 393)(!return ">"))(!do
(!line 395)(!callmeth self _next )
(!line 396)(!return ">="))))(!if (!eq (!index self "current") "~")
(!do
(!line 399)(!callmeth self _next )
(!line 400)(!if (!ne (!index self "current") "=")
(!do
(!line 401)(!return "~"))(!do
(!line 403)(!callmeth self _next )
(!line 404)(!return "~="))))(!if (!eq (!index self "current") ":")
(!do
(!line 407)(!callmeth self _next )
(!line 408)(!if (!ne (!index self "current") ":")
(!do
(!line 409)(!return ":"))(!do
(!line 411)(!callmeth self _next )
(!line 412)(!return "::"))))(!if (!or (!eq (!index self "current") "\"") (!eq (!index self "current") "'"))
(!do
(!line 416)(!callmeth self _read_string (!index self "current") tok)
(!line 417)(!return "<string>"))(!if (!eq (!index self "current") ".")
(!do
(!line 419)(!callmeth self _save_and_next )
(!line 420)(!if (!callmeth1 self _check_next ".")
(!do
(!line 421)(!if (!callmeth1 self _check_next ".")
(!do
(!line 422)(!return "..."))(!do
(!line 424)(!return "..")))))
(!line 427)(!if (!not (!call find digit (!index self "current")))
(!do
(!line 428)(!return "."))(!do
(!line 430)(!callmeth self _read_numeral tok)
(!line 431)(!return "<number>"))))(!if (!eq (!index self "current") "")
(!do
(!line 434)(!return ""))(!if (!call1 find digit (!index self "current"))
(!do
(!line 436)(!callmeth self _read_numeral tok)
(!line 437)(!return "<number>"))(!do
(!line 439)(!if (!call1 find alpha (!index self "current"))
(!do
(!line 440)(!repeat
(!line 441)(!callmeth self _save_and_next )
(!not (!call find alnum (!index self "current"))))
(!line 443)(!assign (!index tok "seminfo") (!call tconcat (!index self "buff")))
(!line 444)(!if (!index tokens (!index tok "seminfo"))
(!do
(!line 445)(!return (!index tok "seminfo")))(!do
(!line 447)(!return "<name>"))))(!do
(!line 450)(!define c (!index self "current"))
(!line 451)(!callmeth self _next )
(!line 452)(!return c))))))))))))))))))))

(!line 458)(!assign (!index L "next") (!lambda (self)
(!line 459)(!assign (!index self "lastline") (!index self "linenumber"))
(!line 460)(!if (!ne (!index (!index self "_lookahead") "token") "")
(!do
(!line 461)(!assign (!index self "t") (!index self "_lookahead"))
(!line 462)(!assign (!index self "_lookahead") ("token": "")))(!do
(!line 464)(!assign (!index (!index self "t") "token") (!callmeth self _llex (!index self "t")))))))

(!line 468)(!assign (!index L "lookahead") (!lambda (self)
(!line 469)(!call assert (!eq (!index (!index self "_lookahead") "token") ""))
(!line 470)(!assign (!index (!index self "_lookahead") "token") (!callmeth self _llex (!index self "_lookahead")))
(!line 471)(!return (!index (!index self "_lookahead") "token"))))

(!line 474)(!assign (!index L "BOM") (!lambda (self)
(!line 476)(!if (!eq (!index self "current") (!call char 0xEF))
(!do
(!line 477)(!callmeth self _next )
(!line 478)(!if (!eq (!index self "current") (!call char 0xBB))
(!do
(!line 479)(!callmeth self _next )
(!line 480)(!if (!eq (!index self "current") (!call char 0xBF))
(!do
(!line 481)(!callmeth self _next )))))))))

(!line 487)(!assign (!index L "shebang") (!lambda (self)
(!line 488)(!callmeth self BOM )
(!line 489)(!if (!eq (!index self "current") "#")
(!do
(!line 490)(!while (!ne (!index self "current") "\x0A")

(!line 491)(!callmeth self _next ))
(!line 493)(!callmeth self _inclinenumber )))))

(!line 497)(!define P (!call setmetatable () ("__index": L)))
(!line 499)(!assign (!index P "error_expected") (!lambda (self token)
(!line 500)(!callmeth self syntaxerror (!concat token " expected"))))

(!line 503)(!assign (!index P "testnext") (!lambda (self c)
(!line 504)(!if (!eq (!index (!index self "t") "token") c)
(!do
(!line 505)(!callmeth self next )
(!line 506)(!return !true))(!do
(!line 508)(!return !false)))))

(!line 512)(!assign (!index P "check") (!lambda (self c)
(!line 513)(!if (!ne (!index (!index self "t") "token") c)
(!do
(!line 514)(!callmeth self error_expected c)))))

(!line 518)(!assign (!index P "checknext") (!lambda (self c)
(!line 519)(!callmeth self check c)
(!line 520)(!callmeth self next )))

(!line 523)(!assign (!index P "check_match") (!lambda (self what who where)
(!line 524)(!if (!not (!callmeth self testnext what))
(!do
(!line 525)(!if (!eq where (!index self "linenumber"))
(!do
(!line 526)(!callmeth self error_expected what))(!do
(!line 528)(!callmeth self syntaxerror (!call format "%s expected (to close %s at line %d)" what who where))))))))

(!line 533)(!assign (!index P "str_checkname") (!lambda (self)
(!line 534)(!callmeth self check "<name>")
(!line 535)(!define name (!index (!index self "t") "seminfo"))
(!line 536)(!callmeth self next )
(!line 537)(!return name)))

(!line 546)(!assign (!index P "block_follow") (!lambda (self withuntil)
(!line 547)(!if (!or (!or (!or (!eq (!index (!index self "t") "token") "else") (!eq (!index (!index self "t") "token") "elseif")) (!eq (!index (!index self "t") "token") "end")) (!eq (!index (!index self "t") "token") ""))
(!do
(!line 551)(!return !true))(!if (!eq (!index (!index self "t") "token") "until")
(!do
(!line 553)(!return withuntil))(!do
(!line 555)(!return !false))))))

(!line 559)(!assign (!index P "statlist") (!lambda (self)
(!line 561)(!while (!not (!callmeth self block_follow !true))

(!line 562)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) "\x0A")
(!line 563)(!if (!eq (!index (!index self "t") "token") "return")
(!do
(!line 564)(!callmeth self statement )
(!line 565)(!return )))
(!line 567)(!callmeth self statement ))))

(!line 571)(!assign (!index P "fieldsel") (!lambda (self)
(!line 573)(!callmeth self next )
(!line 574)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) (!call quote (!callmeth self str_checkname )))))

(!line 577)(!assign (!index P "yindex") (!lambda (self)
(!line 579)(!callmeth self next )
(!line 580)(!callmeth self expr !true)
(!line 581)(!callmeth self checknext "]")))

(!line 584)(!assign (!index P "recfield") (!lambda (self)
(!line 586)(!if (!eq (!index (!index self "t") "token") "<name>")
(!do
(!line 587)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) (!call quote (!callmeth self str_checkname ))))(!do
(!line 589)(!callmeth self yindex )))
(!line 591)(!callmeth self checknext "=")
(!line 592)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) ": ")
(!line 593)(!callmeth self expr !true)))

(!line 596)(!assign (!index P "listfield") (!lambda (self list)
(!line 598)(!if (!eq (!len list) 0)
(!do
(!line 599)(!assign (!index list 1) !true)))
(!line 601)(!callmeth self expr )))

(!line 604)(!assign (!index P "field") (!lambda (self list)
(!line 606)(!if (!eq (!index (!index self "t") "token") "<name>")
(!do
(!line 607)(!if (!ne (!callmeth1 self lookahead ) "=")
(!do
(!line 608)(!callmeth self listfield list))(!do
(!line 610)(!callmeth self recfield ))))(!if (!eq (!index (!index self "t") "token") "[")
(!do
(!line 613)(!callmeth self recfield ))(!do
(!line 615)(!callmeth self listfield list))))))

(!line 619)(!assign (!index P "constructor") (!lambda (self)
(!line 621)(!define line (!index self "linenumber"))
(!line 622)(!callmeth self checknext "{")
(!line 623)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) "(")
(!line 624)(!define list ())
(!line 625)(!repeat
(!line 626)(!if (!eq (!index (!index self "t") "token") "}")
(!do
(!line 627)(!break)))
(!line 629)(!callmeth self field list)
(!line 630)(!if (!or (!eq (!index (!index self "t") "token") ",") (!eq (!index (!index self "t") "token") ";"))
(!do
(!line 631)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) " ")))
(!not (!or (!callmeth1 self testnext ",") (!callmeth self testnext ";"))))
(!line 634)(!callmeth self check_match "}" "{" line)
(!line 635)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) ")")))

(!line 638)(!assign (!index P "parlist") (!lambda (self ismethod)
(!line 641)(!if ismethod
(!do
(!line 642)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) "self")))
(!line 644)(!if (!ne (!index (!index self "t") "token") ")")
(!do
(!line 645)(!if ismethod
(!do
(!line 646)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) " ")))
(!line 648)(!repeat
(!line 649)(!if (!eq (!index (!index self "t") "token") "<name>")
(!do
(!line 650)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) (!index (!index self "t") "seminfo"))
(!line 651)(!callmeth self next ))(!if (!eq (!index (!index self "t") "token") "...")
(!do
(!line 653)(!callmeth self next )
(!line 654)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) "!vararg")
(!line 655)(!break))(!do
(!line 657)(!callmeth self syntaxerror "<name> or '...' expected"))))
(!line 659)(!if (!eq (!index (!index self "t") "token") ",")
(!do
(!line 660)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) " ")))
(!not (!callmeth self testnext ",")))))))

(!line 666)(!assign (!index P "body") (!lambda (self ismethod line)
(!line 668)(!define line (!index self "linenumber"))
(!line 669)(!callmeth self checknext "(")
(!line 670)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) "(")
(!line 671)(!callmeth self parlist ismethod)
(!line 672)(!callmeth self checknext ")")
(!line 673)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) ")")
(!line 674)(!callmeth self statlist )
(!line 675)(!callmeth self check_match "end" "function" line)
(!line 676)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) ")")))

(!line 679)(!assign (!index P "explist") (!lambda (self)
(!line 681)(!callmeth self expr )
(!line 682)(!while (!callmeth1 self testnext ",")

(!line 683)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) " ")
(!line 684)(!callmeth self expr ))))

(!line 688)(!assign (!index P "funcargs") (!lambda (self line)
(!line 689)(!if (!eq (!index (!index self "t") "token") "(")
(!do
(!line 691)(!callmeth self next )
(!line 692)(!if (!ne (!index (!index self "t") "token") ")")
(!do
(!line 693)(!callmeth self explist )))
(!line 695)(!callmeth self check_match ")" "(" line))(!if (!eq (!index (!index self "t") "token") "{")
(!do
(!line 698)(!callmeth self constructor ))(!if (!eq (!index (!index self "t") "token") "<string>")
(!do
(!line 701)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) (!call quote (!index (!index self "t") "seminfo")))
(!line 702)(!callmeth self next ))(!do
(!line 704)(!callmeth self syntaxerror "function arguments expected")))))))

(!line 708)(!assign (!index P "primaryexpr") (!lambda (self)
(!line 710)(!if (!eq (!index (!index self "t") "token") "(")
(!do
(!line 711)(!define line (!index self "linenumber"))
(!line 712)(!callmeth self next )
(!line 713)(!callmeth self expr !true)
(!line 714)(!callmeth self check_match ")" "(" line))(!if (!eq (!index (!index self "t") "token") "<name>")
(!do
(!line 716)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) (!callmeth self str_checkname )))(!do
(!line 718)(!callmeth self syntaxerror "unexpected symbol"))))))

(!line 722)(!assign (!index P "suffixedexp") (!lambda (self one)
(!line 725)(!define line (!index self "linenumber"))
(!line 726)(!define sav (!index self "out"))
(!line 727)(!assign (!index self "out") ())
(!line 728)(!callmeth self primaryexpr )
(!line 729)(!define out (!call tconcat (!index self "out")))
(!line 730)(!while !true

(!line 731)(!assign (!index self "out") ())
(!line 732)(!if (!eq (!index (!index self "t") "token") ".")
(!do
(!line 733)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) "(!index ")
(!line 734)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) out)
(!line 735)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) " ")
(!line 736)(!callmeth self fieldsel )
(!line 737)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) ")")
(!line 738)(!assign out (!call tconcat (!index self "out"))))(!if (!eq (!index (!index self "t") "token") "[")
(!do
(!line 740)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) "(!index ")
(!line 741)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) out)
(!line 742)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) " ")
(!line 743)(!callmeth self yindex )
(!line 744)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) ")")
(!line 745)(!assign out (!call tconcat (!index self "out"))))(!if (!eq (!index (!index self "t") "token") ":")
(!do
(!line 747)(!callmeth self next )
(!line 748)(!if one
(!do
(!line 749)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) "(!callmeth1 "))(!do
(!line 751)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) "(!callmeth ")))
(!line 753)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) out)
(!line 754)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) " ")
(!line 755)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) (!callmeth self str_checkname ))
(!line 756)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) " ")
(!line 757)(!callmeth self funcargs line)
(!line 758)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) ")")
(!line 759)(!assign out (!call tconcat (!index self "out"))))(!if (!or (!or (!eq (!index (!index self "t") "token") "(") (!eq (!index (!index self "t") "token") "{")) (!eq (!index (!index self "t") "token") "<string>"))
(!do
(!line 763)(!if one
(!do
(!line 764)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) "(!call1 "))(!do
(!line 766)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) "(!call ")))
(!line 768)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) out)
(!line 769)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) " ")
(!line 770)(!callmeth self funcargs line)
(!line 771)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) ")")
(!line 772)(!assign out (!call tconcat (!index self "out"))))(!do
(!line 774)(!assign (!index self "out") sav)
(!line 775)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) out)
(!line 776)(!return )))))))))

(!line 781)(!assign (!index P "simpleexpr") (!lambda (self one)
(!line 784)(!if (!eq (!index (!index self "t") "token") "<number>")
(!do
(!line 785)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) (!index (!index self "t") "seminfo")))(!if (!eq (!index (!index self "t") "token") "<string>")
(!do
(!line 787)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) (!call quote (!index (!index self "t") "seminfo"))))(!if (!eq (!index (!index self "t") "token") "nil")
(!do
(!line 789)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) "!nil"))(!if (!eq (!index (!index self "t") "token") "true")
(!do
(!line 791)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) "!true"))(!if (!eq (!index (!index self "t") "token") "false")
(!do
(!line 793)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) "!false"))(!if (!eq (!index (!index self "t") "token") "...")
(!do
(!line 795)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) "!vararg"))(!if (!eq (!index (!index self "t") "token") "{")
(!do
(!line 797)(!callmeth self constructor )
(!line 798)(!return ))(!if (!eq (!index (!index self "t") "token") "function")
(!do
(!line 800)(!callmeth self next )
(!line 801)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) "(!lambda ")
(!line 802)(!callmeth self body !false (!index self "linenumber"))
(!line 803)(!return ))(!do
(!line 805)(!callmeth self suffixedexp one)
(!line 806)(!return ))))))))))
(!line 808)(!callmeth self next )))

(!line 811)(!define unop ("not": "(!not " "-": "(!neg " "#": "(!len " ))
(!line 816)(!define binop ("+": "(!add " "-": "(!sub " "*": "(!mul " "/": "(!div " "%": "(!mod " "^": "(!pow " "..": "(!concat " "~=": "(!ne " "==": "(!eq " "<=": "(!le " "<": "(!lt " ">=": "(!ge " ">": "(!gt " "and": "(!and " "or": "(!or " ))
(!line 833)(!define priority ("+": (6 6) "-": (6 6) "*": (7 7) "/": (7 7) "%": (7 7) "^": (10 9) "..": (5 4) "~=": (3 3) "==": (3 3) "<=": (3 3) "<": (3 3) ">=": (3 3) ">": (3 3) "and": (2 2) "or": (1 1) ))
(!line 852)(!assign (!index P "expr") (!lambda (self one limit)
(!line 854)(!assign limit (!or limit 0))
(!line 855)(!define sav (!index self "out"))
(!line 856)(!assign (!index self "out") ())
(!line 857)(!define uop (!index unop (!index (!index self "t") "token")))
(!line 858)(!if uop
(!do
(!line 859)(!callmeth self next )
(!line 860)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) uop)
(!line 861)(!callmeth self expr !false 8)
(!line 862)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) ")"))(!do
(!line 864)(!assign pos (!callmeth self simpleexpr one))))
(!line 866)(!define out (!call tconcat (!index self "out")))
(!line 867)(!define op (!index binop (!index (!index self "t") "token")))
(!line 868)(!define prior (!index priority (!index (!index self "t") "token")))
(!line 869)(!while (!and op (!gt (!index prior 1) limit))

(!line 870)(!callmeth self next )
(!line 871)(!assign (!index self "out") (op out " "))
(!line 872)(!callmeth self expr !false (!index prior 2))
(!line 873)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) ")")
(!line 874)(!assign out (!call tconcat (!index self "out")))
(!line 875)(!assign op (!index binop (!index (!index self "t") "token")))
(!line 876)(!assign prior (!index priority (!index (!index self "t") "token"))))
(!line 878)(!assign (!index self "out") sav)
(!line 879)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) out)))

(!line 882)(!assign (!index P "block") (!lambda (self)
(!line 884)(!callmeth self statlist )
(!line 885)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) ")")))

(!line 888)(!assign (!index P "assignment") (!lambda (self n line)
(!line 889)(!if (!callmeth1 self testnext ",")
(!do
(!line 891)(!if (!eq n 1)
(!do
(!line 892)(!define var (!index (!index self "out") (!len (!index self "out"))))
(!line 893)(!assign (!index (!index self "out") (!len (!index self "out"))) "(!line ")
(!line 894)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) line)
(!line 895)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) ")(!massign (")
(!line 896)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) var)))
(!line 898)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) " ")
(!line 899)(!callmeth self suffixedexp )
(!line 900)(!callmeth self assignment (!add n 1)))(!do
(!line 903)(!callmeth self checknext "=")
(!line 904)(!if (!eq n 1)
(!do
(!line 905)(!define var (!index (!index self "out") (!len (!index self "out"))))
(!line 906)(!assign (!index (!index self "out") (!len (!index self "out"))) "(!line ")
(!line 907)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) line)
(!line 908)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) ")(!assign ")
(!line 909)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) var)
(!line 910)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) " "))(!do
(!line 912)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) ") (")))
(!line 914)(!callmeth self explist )
(!line 915)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) ")")
(!line 916)(!if (!ne n 1)
(!do
(!line 917)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) ")")))))))

(!line 922)(!assign (!index P "breakstat") (!lambda (self line)
(!line 923)(!callmeth self next )
(!line 924)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) "(!line ")
(!line 925)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) line)
(!line 926)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) ")(!break)")))

(!line 929)(!assign (!index P "gotostat") (!lambda (self line)
(!line 930)(!callmeth self next )
(!line 931)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) "(!line ")
(!line 932)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) line)
(!line 933)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) ")(!goto ")
(!line 934)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) (!callmeth self str_checkname ))
(!line 935)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) ")")))

(!line 938)(!assign (!index P "labelstat") (!lambda (self name line)
(!line 940)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) "(!line ")
(!line 941)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) line)
(!line 942)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) ")(!label ")
(!line 943)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) name)
(!line 944)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) ")")
(!line 945)(!callmeth self checknext "::")))

(!line 948)(!assign (!index P "whilestat") (!lambda (self line)
(!line 950)(!callmeth self next )
(!line 951)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) "(!line ")
(!line 952)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) line)
(!line 953)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) ")(!while ")
(!line 954)(!callmeth self expr !true)
(!line 955)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) "\x0A")
(!line 956)(!callmeth self checknext "do")
(!line 957)(!callmeth self block )
(!line 958)(!callmeth self check_match "end" "while" line)))

(!line 961)(!assign (!index P "repeatstat") (!lambda (self line)
(!line 963)(!callmeth self next )
(!line 964)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) "(!line ")
(!line 965)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) line)
(!line 966)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) ")(!repeat")
(!line 967)(!callmeth self statlist )
(!line 968)(!callmeth self check_match "until" "repeat" line)
(!line 969)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) "\x0A")
(!line 970)(!callmeth self expr !true)
(!line 971)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) ")")))

(!line 974)(!assign (!index P "forbody") (!lambda (self name)
(!line 976)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) "\x0A")
(!line 977)(!callmeth self checknext "do")
(!line 978)(!if name
(!do
(!line 979)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) "(!define ")
(!line 980)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) name)
(!line 981)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) " ")
(!line 982)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) name)
(!line 983)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) ")")))
(!line 985)(!callmeth self block )))

(!line 988)(!assign (!index P "fornum") (!lambda (self name line)
(!line 990)(!callmeth self checknext "=")
(!line 991)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) "(!line ")
(!line 992)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) line)
(!line 993)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) ")(!loop ")
(!line 994)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) name)
(!line 995)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) " ")
(!line 997)(!callmeth self expr !true)
(!line 998)(!callmeth self checknext ",")
(!line 999)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) " ")
(!line 1000)(!callmeth self expr !true)
(!line 1001)(!if (!callmeth1 self testnext ",")
(!do
(!line 1002)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) " ")
(!line 1003)(!callmeth self expr !true))(!do
(!line 1005)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) " 1 ")))
(!line 1007)(!callmeth self forbody name)))

(!line 1010)(!assign (!index P "forlist") (!lambda (self name line)
(!line 1012)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) "(!line ")
(!line 1013)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) line)
(!line 1014)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) ")(!for (")
(!line 1015)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) name)
(!line 1016)(!while (!callmeth1 self testnext ",")

(!line 1017)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) " ")
(!line 1018)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) (!callmeth self str_checkname )))
(!line 1020)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) ") (")
(!line 1021)(!callmeth self checknext "in")
(!line 1022)(!assign line (!index self "linenumber"))
(!line 1023)(!callmeth self explist )
(!line 1024)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) ")")
(!line 1025)(!callmeth self forbody )))

(!line 1028)(!assign (!index P "forstat") (!lambda (self line)
(!line 1030)(!callmeth self next )
(!line 1031)(!define name (!callmeth self str_checkname ))
(!line 1032)(!if (!eq (!index (!index self "t") "token") "=")
(!do
(!line 1033)(!callmeth self fornum name line))(!if (!or (!eq (!index (!index self "t") "token") ",") (!eq (!index (!index self "t") "token") "in"))
(!do
(!line 1036)(!callmeth self forlist name line))(!do
(!line 1038)(!callmeth self syntaxerror "'=' or 'in' expected"))))
(!line 1040)(!callmeth self check_match "end" "for" line)))

(!line 1043)(!assign (!index P "test_then_block") (!lambda (self)
(!line 1045)(!callmeth self next )
(!line 1046)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) "(!if ")
(!line 1047)(!callmeth self expr !true)
(!line 1048)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) "\x0A")
(!line 1049)(!callmeth self checknext "then")
(!line 1050)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) "(!do")
(!line 1051)(!callmeth self block )))

(!line 1054)(!assign (!index P "ifstat") (!lambda (self line)
(!line 1056)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) "(!line ")
(!line 1057)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) line)
(!line 1058)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) ")")
(!line 1059)(!callmeth self test_then_block )
(!line 1060)(!define n 1)
(!line 1061)(!while (!eq (!index (!index self "t") "token") "elseif")

(!line 1062)(!callmeth self test_then_block )
(!line 1063)(!assign n (!add n 1)))
(!line 1065)(!if (!callmeth1 self testnext "else")
(!do
(!line 1066)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) "(!do")
(!line 1067)(!callmeth self block )))
(!line 1069)(!callmeth self check_match "end" "if" line)
(!line 1070)(!loop i 1 n 1
(!define i i)
(!line 1071)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) ")"))))

(!line 1075)(!assign (!index P "localfunc") (!lambda (self line)
(!line 1076)(!define name (!callmeth self str_checkname ))
(!line 1077)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) "(!line ")
(!line 1078)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) line)
(!line 1079)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) ")(!define ")
(!line 1080)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) name)
(!line 1081)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) ")(!assign ")
(!line 1082)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) name)
(!line 1083)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) " (!lambda ")
(!line 1084)(!callmeth self body !false (!index self "linenumber"))
(!line 1085)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) ")\x0A")))

(!line 1088)(!assign (!index P "localstat") (!lambda (self line)
(!line 1090)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) "(!line ")
(!line 1091)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) line)
(!line 1092)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) ")(!define ")
(!line 1093)(!define multi !false)
(!line 1094)(!repeat
(!line 1095)(!define name (!callmeth self str_checkname ))
(!line 1096)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) name)
(!line 1097)(!if (!eq (!index (!index self "t") "token") ",")
(!do
(!line 1098)(!if (!not multi)
(!do
(!line 1099)(!assign multi !true)
(!line 1100)(!assign (!index (!index self "out") (!len (!index self "out"))) "(")
(!line 1101)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) name)))
(!line 1103)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) " ")))
(!not (!callmeth self testnext ",")))
(!line 1106)(!if multi
(!do
(!line 1107)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) ")")))
(!line 1109)(!if (!callmeth1 self testnext "=")
(!do
(!line 1110)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) " ")
(!line 1111)(!if multi
(!do
(!line 1112)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) "(")))
(!line 1114)(!callmeth self explist )
(!line 1115)(!if multi
(!do
(!line 1116)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) ")")))))
(!line 1119)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) ")")))

(!line 1122)(!assign (!index P "funcname") (!lambda (self)
(!line 1124)(!define ismethod !false)
(!line 1125)(!define name (!callmeth self str_checkname ))
(!line 1126)(!while (!eq (!index (!index self "t") "token") ".")

(!line 1127)(!define sav (!index self "out"))
(!line 1128)(!assign (!index self "out") ("(!index " name " "))
(!line 1129)(!callmeth self fieldsel )
(!line 1130)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) ")")
(!line 1131)(!assign name (!call tconcat (!index self "out")))
(!line 1132)(!assign (!index self "out") sav))
(!line 1134)(!if (!eq (!index (!index self "t") "token") ":")
(!do
(!line 1135)(!assign ismethod !true)
(!line 1136)(!define sav (!index self "out"))
(!line 1137)(!assign (!index self "out") ("(!index " name " "))
(!line 1138)(!callmeth self fieldsel )
(!line 1139)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) ")")
(!line 1140)(!assign name (!call tconcat (!index self "out")))
(!line 1141)(!assign (!index self "out") sav)))
(!line 1143)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) name)
(!line 1144)(!return ismethod)))

(!line 1147)(!assign (!index P "funcstat") (!lambda (self line)
(!line 1149)(!callmeth self next )
(!line 1150)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) "(!line ")
(!line 1151)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) line)
(!line 1152)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) ")(!assign ")
(!line 1153)(!define ismethod (!callmeth self funcname ))
(!line 1154)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) " (!lambda ")
(!line 1155)(!callmeth self body ismethod line)
(!line 1156)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) ")\x0A")))

(!line 1159)(!assign (!index P "exprstat") (!lambda (self line)
(!line 1161)(!define sav (!index self "out"))
(!line 1162)(!assign (!index self "out") ())
(!line 1163)(!callmeth self suffixedexp )
(!line 1164)(!define out (!call tconcat (!index self "out")))
(!line 1165)(!assign (!index self "out") sav)
(!line 1166)(!if (!or (!eq (!index (!index self "t") "token") "=") (!eq (!index (!index self "t") "token") ","))
(!do
(!line 1167)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) out)
(!line 1168)(!callmeth self assignment 1 line))(!do
(!line 1170)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) "(!line ")
(!line 1171)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) line)
(!line 1172)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) ")")
(!line 1173)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) out)))))

(!line 1177)(!assign (!index P "retstat") (!lambda (self line)
(!line 1179)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) "(!line ")
(!line 1180)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) line)
(!line 1181)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) ")(!return ")
(!line 1182)(!if (!and (!not (!callmeth self block_follow !true)) (!ne (!index (!index self "t") "token") ";"))
(!do
(!line 1183)(!callmeth self explist )))
(!line 1185)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) ")")
(!line 1186)(!callmeth self testnext ";")))

(!line 1189)(!assign (!index P "statement") (!lambda (self)
(!line 1190)(!define line (!index self "linenumber"))
(!line 1191)(!if (!eq (!index (!index self "t") "token") ";")
(!do
(!line 1193)(!callmeth self next ))(!if (!eq (!index (!index self "t") "token") "if")
(!do
(!line 1196)(!callmeth self ifstat line))(!if (!eq (!index (!index self "t") "token") "while")
(!do
(!line 1199)(!callmeth self whilestat line))(!if (!eq (!index (!index self "t") "token") "do")
(!do
(!line 1202)(!callmeth self next )
(!line 1203)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) "(!line ")
(!line 1204)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) line)
(!line 1205)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) ")(!do")
(!line 1206)(!callmeth self block )
(!line 1207)(!callmeth self check_match "end" "do" line))(!if (!eq (!index (!index self "t") "token") "for")
(!do
(!line 1210)(!callmeth self forstat line))(!if (!eq (!index (!index self "t") "token") "repeat")
(!do
(!line 1213)(!callmeth self repeatstat line))(!if (!eq (!index (!index self "t") "token") "function")
(!do
(!line 1216)(!callmeth self funcstat line))(!if (!eq (!index (!index self "t") "token") "local")
(!do
(!line 1219)(!callmeth self next )
(!line 1220)(!if (!callmeth1 self testnext "function")
(!do
(!line 1221)(!callmeth self localfunc line))(!do
(!line 1223)(!callmeth self localstat line))))(!if (!eq (!index (!index self "t") "token") "::")
(!do
(!line 1227)(!callmeth self next )
(!line 1228)(!callmeth self labelstat (!callmeth self str_checkname ) line))(!if (!eq (!index (!index self "t") "token") "return")
(!do
(!line 1231)(!callmeth self next )
(!line 1232)(!callmeth self retstat line))(!if (!eq (!index (!index self "t") "token") "break")
(!do
(!line 1235)(!callmeth self breakstat line))(!if (!eq (!index (!index self "t") "token") "goto")
(!do
(!line 1238)(!callmeth self gotostat line))(!do
(!line 1241)(!callmeth self exprstat line))))))))))))))))

(!line 1245)(!assign (!index P "mainfunc") (!lambda (self)
(!line 1246)(!callmeth self next )
(!line 1247)(!callmeth self statlist )
(!line 1248)(!callmeth self check "")))

(!line 1251)(!define translate)(!assign translate (!lambda (s fname)
(!line 1252)(!define p (!call setmetatable () ("__index": P)))
(!line 1253)(!callmeth p setinput s fname)
(!line 1254)(!if (!eq (!index p "current") "\x1B")
(!do
(!line 1255)(!return s)))
(!line 1257)(!callmeth p BOM )
(!line 1258)(!callmeth p shebang )
(!line 1259)(!assign (!index p "out") ("(!line " (!call quote fname) " " (!index p "linenumber") ")"))
(!line 1260)(!callmeth p mainfunc )
(!line 1261)(!assign (!index (!index p "out") (!add (!len (!index p "out")) 1)) "\x0A; end of generation")
(!line 1262)(!return (!call tconcat (!index p "out")))))

(!line 1265)(!assign (!index _G "_COMPILER") translate)
(!line 1267)(!define fname (!and arg (!index arg 1)))
(!line 1268)(!if fname
(!do
(!line 1269)(!define (f msg) ((!call (!index (!index _G "io") "open") fname "r")))
(!line 1270)(!if (!not f)
(!do
(!line 1271)(!call error msg)))
(!line 1273)(!define s (!callmeth f read "*a"))
(!line 1274)(!callmeth f close )
(!line 1275)(!define code (!call translate s (!concat "@" fname)))
(!line 1276)(!call print "; bootstrap")
(!line 1277)(!call print code)))
; end of generation
