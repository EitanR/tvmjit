; bootstrap
(!line "@lua/lunokhod.lua" 1)
(!line 7)(!define _G _G)
(!line 8)(!define arg arg)
(!line 9)(!define assert assert)
(!line 10)(!define error error)
(!line 11)(!define tonumber tonumber)
(!line 12)(!define print print)
(!line 13)(!define char (!index string "char"))
(!line 14)(!define quote (!index string "quote"))
(!line 15)(!define tconcat (!index table "concat"))
(!line 16)(!define any (!index peg "any"))
(!line 17)(!define backref (!index peg "backref"))
(!line 18)(!define capture (!index peg "capture"))
(!line 19)(!define choice (!index peg "choice"))
(!line 20)(!define not_followed_by (!index peg "not_followed_by"))
(!line 21)(!define eos (!call (!index peg "eos") ))
(!line 22)(!define except (!index peg "except"))
(!line 23)(!define group (!index peg "group"))
(!line 24)(!define locale (!call (!index peg "locale") ))
(!line 25)(!define literal (!index peg "literal"))
(!line 26)(!define many (!index peg "many"))
(!line 27)(!define matchtime (!index peg "matchtime"))
(!line 28)(!define optional (!index peg "optional"))
(!line 29)(!define position (!call (!index peg "position") ))
(!line 30)(!define range (!index peg "range"))
(!line 31)(!define replace (!index peg "replace"))
(!line 32)(!define sequence (!index peg "sequence"))
(!line 33)(!define set (!index peg "set"))
(!line 34)(!define some (!index peg "some"))
(!line 35)(!define subst (!index peg "subst"))
(!line 38)(!define lineno)
(!line 39)(!define inc_lineno)(!assign inc_lineno (!lambda ()
(!line 40)(!assign lineno (!add lineno 1))))

(!line 42)(!define inc_lineno2)(!assign inc_lineno2 (!lambda ()
(!line 43)(!assign lineno (!add lineno 0.5))))

(!line 45)(!define syntaxerror)(!assign syntaxerror (!lambda (err)
(!line 46)(!call error (!concat err (!concat " at " lineno)))))

(!line 49)(!define bytecode (!call literal "\x1B"))
(!line 50)(!define bom (!call literal "ï»¿"))
(!line 51)(!define shebang (!call sequence (!call literal "#!") (!call many (!call except (!call any ) (!call set "\x0C\x0A\x0D")))))
(!line 52)(!define equals (!call many (!call literal "=")))
(!line 53)(!define open (!call sequence (!call literal "[") (!call group equals "init") (!call literal "[") (!call optional (!call replace (!call literal "\x0A") inc_lineno2))))
(!line 54)(!define close (!call sequence (!call literal "]") (!call capture equals) (!call literal "]")))
(!line 55)(!define closeeq (!call matchtime (!call sequence close (!call backref "init")) (!lambda (s i a b)
(!line 55)(!return (!eq a b)))))
(!line 56)(!define long_string (!call replace (!call sequence open (!call capture (!call many (!call choice (!call replace (!call literal "\x0A") inc_lineno2) (!call except (!call any ) closeeq)))) close) quote))
(!line 57)(!define comment (!call sequence (!call literal "--") (!call choice (!call replace long_string (!lambda ()
(!line 57)(!return ))) (!call many (!call except (!call any ) (!call set "\x0C\x0A\x0D"))))))
(!line 58)(!define ws (!call many (!call choice (!call set " \x0C\x09\x0D\x0B") (!call replace (!call literal "\x0A") inc_lineno) comment)))
(!line 59)(!define capt_ws (!call sequence (!call capture ws) position))
(!line 61)(!define reserved ("and": !true "break": !true "do": !true "else": !true "elseif": !true "end": !true "false": !true "for": !true "function": !true "goto": !true "if": !true "in": !true "local": !true "nil": !true "not": !true "or": !true "repeat": !true "return": !true "then": !true "true": !true "until": !true "while": !true ))
(!line 85)(!define check_reserved (!lambda (tok)
(!line 86)(!if (!not (!index reserved tok))
(!do
(!line 87)(!return tok)))))
(!line 90)(!define ch_ident (!call range "09" "AZ" "az" "__"))
(!line 91)(!define identifier (!call sequence (!call range "AZ" "az" "__") (!call many ch_ident)))
(!line 92)(!define capt_identifier (!call sequence (!call replace identifier check_reserved) position))
(!line 94)(!define int (!call some (!index locale "digit")))
(!line 95)(!define frac (!call sequence (!call literal ".") (!call many (!index locale "digit"))))
(!line 96)(!define sign (!call set "-+"))
(!line 97)(!define exp (!call sequence (!call set "Ee") (!call optional sign) (!call some (!index locale "digit"))))
(!line 98)(!define xint (!call sequence (!call literal "0") (!call set "xX") (!call some (!index locale "xdigit"))))
(!line 99)(!define xfrac (!call sequence (!call literal ".") (!call many (!index locale "xdigit"))))
(!line 100)(!define xexp (!call sequence (!call set "Pp") (!call optional sign) (!call some (!index locale "digit"))))
(!line 101)(!define number (!call choice (!call sequence xint (!call optional xfrac) (!call optional xexp)) (!call sequence (!call optional (!call literal "-")) int (!call optional frac) (!call optional exp))))
(!line 103)(!define capt_number (!call sequence (!call capture number) position))
(!line 106)(!define gsub)(!assign gsub (!lambda (patt repl)
(!line 107)(!return (!call subst (!call many (!call choice (!call replace patt repl) (!call any )))))))

(!line 110)(!define special ("'": "'" "\"": "\"" "\\": "\\" "/": "/" "a": "\x07" "b": "\x08" "f": "\x0C" "n": "\x0A" "r": "\x0D" "t": "\x09" "v": "\x0B" ))
(!line 124)(!define escape_special (!call sequence (!call literal "\\") (!call capture (!call set "'\"\\/abfnrtv"))))
(!line 125)(!define gsub_escape_special (!call gsub escape_special special))
(!line 126)(!define escape_xdigit (!call sequence (!call literal "\\x") (!call capture (!call sequence (!index locale "xdigit") (!index locale "xdigit")))))
(!line 127)(!define gsub_escape_xdigit (!call gsub escape_xdigit (!lambda (s)
(!line 128)(!return (!call char (!call tonumber s 16))))))
(!line 130)(!define escape_decimal (!call sequence (!call literal "\\") (!call capture (!call sequence (!index locale "digit") (!call optional (!index locale "digit")) (!call optional (!index locale "digit"))))))
(!line 131)(!define gsub_escape_decimal (!call gsub escape_decimal (!lambda (s)
(!line 132)(!define n (!call tonumber s))
(!line 133)(!if (!ge n 256)
(!do
(!line 134)(!call syntaxerror (!concat "decimal escape too large near " s))))
(!line 136)(!return (!call char n)))))
(!line 139)(!define unescape (!lambda (str)
(!line 140)(!return (!callmeth gsub_escape_special match (!callmeth gsub_escape_xdigit match (!callmeth gsub_escape_decimal match str))))))
(!line 143)(!define zap (!call replace (!call sequence (!call literal "\\z") (!call some (!call set "\x0A\x0D")) (!call some (!index locale "space"))) ""))
(!line 144)(!define ch_sq (!call choice zap (!call literal "\\\\") (!call literal "\\'") (!call except (!call any ) (!call literal "'") (!call range "\x00\x1F"))))
(!line 145)(!define ch_dq (!call choice zap (!call literal "\\\\") (!call literal "\\\"") (!call except (!call any ) (!call literal "\"") (!call range "\x00\x1F"))))
(!line 146)(!define simple_quote_string (!call replace (!call replace (!call sequence (!call literal "'") (!call subst (!call many ch_sq)) (!call literal "'")) unescape) quote))
(!line 147)(!define double_quote_string (!call replace (!call replace (!call sequence (!call literal "\"") (!call subst (!call many ch_dq)) (!call literal "\"")) unescape) quote))
(!line 148)(!define tok_string (!call choice simple_quote_string double_quote_string long_string))
(!line 149)(!define capt_string (!call sequence tok_string position))
(!line 152)(!define not_ch_ident (!call not_followed_by ch_ident))
(!line 153)(!define tok_and (!call sequence (!call literal "and") not_ch_ident))
(!line 154)(!define capt_and (!call sequence (!call capture tok_and) position))
(!line 155)(!define tok_break (!call sequence (!call literal "break") not_ch_ident))
(!line 156)(!define capt_break (!call sequence (!call capture tok_break) position))
(!line 157)(!define tok_do (!call sequence (!call literal "do") not_ch_ident))
(!line 158)(!define capt_do (!call sequence (!call capture tok_do) position))
(!line 159)(!define tok_else (!call sequence (!call literal "else") not_ch_ident))
(!line 160)(!define capt_else (!call sequence (!call capture tok_else) position))
(!line 161)(!define tok_elseif (!call sequence (!call literal "elseif") not_ch_ident))
(!line 162)(!define capt_elseif (!call sequence (!call capture tok_elseif) position))
(!line 163)(!define tok_end (!call sequence (!call literal "end") not_ch_ident))
(!line 164)(!define capt_end (!call sequence (!call capture tok_end) position))
(!line 165)(!define tok_false (!call sequence (!call literal "false") not_ch_ident))
(!line 166)(!define capt_false (!call sequence (!call capture tok_false) position))
(!line 167)(!define tok_for (!call sequence (!call literal "for") not_ch_ident))
(!line 168)(!define capt_for (!call sequence (!call capture tok_for) position))
(!line 169)(!define tok_function (!call sequence (!call literal "function") not_ch_ident))
(!line 170)(!define capt_function (!call sequence (!call capture tok_function) position))
(!line 171)(!define tok_goto (!call sequence (!call literal "goto") not_ch_ident))
(!line 172)(!define capt_goto (!call sequence (!call capture tok_goto) position))
(!line 173)(!define tok_if (!call sequence (!call literal "if") not_ch_ident))
(!line 174)(!define capt_if (!call sequence (!call capture tok_if) position))
(!line 175)(!define tok_in (!call sequence (!call literal "in") not_ch_ident))
(!line 176)(!define capt_in (!call sequence (!call capture tok_in) position))
(!line 177)(!define tok_local (!call sequence (!call literal "local") not_ch_ident))
(!line 178)(!define capt_local (!call sequence (!call capture tok_local) position))
(!line 179)(!define tok_nil (!call sequence (!call literal "nil") not_ch_ident))
(!line 180)(!define capt_nil (!call sequence (!call capture tok_nil) position))
(!line 181)(!define tok_not (!call sequence (!call literal "not") not_ch_ident))
(!line 182)(!define capt_not (!call sequence (!call capture tok_not) position))
(!line 183)(!define tok_or (!call sequence (!call literal "or") not_ch_ident))
(!line 184)(!define capt_or (!call sequence (!call capture tok_or) position))
(!line 185)(!define tok_repeat (!call sequence (!call literal "repeat") not_ch_ident))
(!line 186)(!define capt_repeat (!call sequence (!call capture tok_repeat) position))
(!line 187)(!define tok_return (!call sequence (!call literal "return") not_ch_ident))
(!line 188)(!define capt_return (!call sequence (!call capture tok_return) position))
(!line 189)(!define tok_then (!call sequence (!call literal "then") not_ch_ident))
(!line 190)(!define capt_then (!call sequence (!call capture tok_then) position))
(!line 191)(!define tok_true (!call sequence (!call literal "true") not_ch_ident))
(!line 192)(!define capt_true (!call sequence (!call capture tok_true) position))
(!line 193)(!define tok_until (!call sequence (!call literal "until") not_ch_ident))
(!line 194)(!define capt_until (!call sequence (!call capture tok_until) position))
(!line 195)(!define tok_while (!call sequence (!call literal "while") not_ch_ident))
(!line 196)(!define capt_while (!call sequence (!call capture tok_while) position))
(!line 199)(!define tok_colon (!call literal ":"))
(!line 200)(!define capt_colon (!call sequence (!call capture tok_colon) position))
(!line 201)(!define tok_comma (!call literal ","))
(!line 202)(!define capt_comma (!call sequence (!call capture tok_comma) position))
(!line 203)(!define tok_dbcolon (!call literal "::"))
(!line 204)(!define capt_dbcolon (!call sequence (!call capture tok_dbcolon) position))
(!line 205)(!define tok_dot (!call sequence (!call literal ".") (!call not_followed_by (!call literal "."))))
(!line 206)(!define capt_dot (!call sequence (!call capture tok_dot) position))
(!line 207)(!define tok_equal (!call literal "="))
(!line 208)(!define capt_equal (!call sequence (!call capture tok_equal) position))
(!line 209)(!define tok_left_brace (!call literal "{"))
(!line 210)(!define capt_left_brace (!call sequence (!call capture tok_left_brace) position))
(!line 211)(!define tok_left_bracket (!call sequence (!call literal "[") (!call not_followed_by (!call literal "[")) (!call not_followed_by (!call literal "="))))
(!line 212)(!define capt_left_bracket (!call sequence (!call capture tok_left_bracket) position))
(!line 213)(!define tok_left_paren (!call literal "("))
(!line 214)(!define capt_left_paren (!call sequence (!call capture tok_left_paren) position))
(!line 215)(!define tok_right_brace (!call literal "}"))
(!line 216)(!define capt_right_brace (!call sequence (!call capture tok_right_brace) position))
(!line 217)(!define tok_right_bracket (!call literal "]"))
(!line 218)(!define capt_right_bracket (!call sequence (!call capture tok_right_bracket) position))
(!line 219)(!define tok_right_paren (!call literal ")"))
(!line 220)(!define capt_right_paren (!call sequence (!call capture tok_right_paren) position))
(!line 221)(!define tok_semicolon (!call literal ";"))
(!line 222)(!define capt_semicolon (!call sequence (!call capture tok_semicolon) position))
(!line 223)(!define tok_sel (!call set ".:"))
(!line 224)(!define capt_sel (!call sequence (!call capture tok_sel) position))
(!line 225)(!define tok_sep (!call set ",;"))
(!line 226)(!define capt_sep (!call sequence (!call capture tok_sep) position))
(!line 227)(!define tok_vararg (!call literal "..."))
(!line 228)(!define capt_vararg (!call sequence (!call capture tok_vararg) position))
(!line 230)(!define unopr (!call choice tok_not (!call literal "-") (!call literal "#")))
(!line 231)(!define capt_unopr (!call sequence (!call capture unopr) position))
(!line 232)(!define binopr (!call choice (!call literal "+") (!call literal "-") (!call literal "*") (!call literal "/") (!call literal "%") (!call literal "^") (!call literal "..") (!call literal "~=") (!call literal "==") (!call literal "<=") (!call literal "<") (!call literal ">=") (!call literal ">") tok_and tok_or))
(!line 234)(!define capt_binopr (!call sequence (!call capture binopr) position))
(!line 237)(!define statement)

(!line 238)(!define expr)

(!line 241)(!define block_follow)(!assign block_follow (!lambda (s pos withuntil)
(!line 242)(!if (!callmeth1 (!call1 literal "else") match s pos)
(!do
(!line 243)(!return !true)))
(!line 245)(!if (!callmeth1 (!call1 literal "elseif") match s pos)
(!do
(!line 246)(!return !true)))
(!line 248)(!if (!callmeth1 (!call1 literal "end") match s pos)
(!do
(!line 249)(!return !true)))
(!line 251)(!if (!callmeth1 eos match s pos)
(!do
(!line 252)(!return !true)))
(!line 254)(!if (!callmeth1 (!call1 literal "until") match s pos)
(!do
(!line 255)(!return withuntil)))
(!line 257)(!return !false)))

(!line 261)(!define skip_ws)(!assign skip_ws (!lambda (s pos)
(!line 262)(!define (capt posn) ((!callmeth capt_ws match s pos)))
(!line 263)(!return posn)))

(!line 267)(!define statlist)(!assign statlist (!lambda (s pos buffer)
(!line 269)(!assign pos (!call skip_ws s pos))
(!line 270)(!while (!not (!call block_follow s pos !true))

(!line 271)(!assign (!index buffer (!len buffer)) "\x0A")
(!line 272)(!if (!callmeth1 tok_return match s pos)
(!do
(!line 273)(!return (!call statement s pos buffer))))
(!line 275)(!assign pos (!call statement s pos buffer))
(!line 276)(!assign pos (!call skip_ws s pos)))
(!line 278)(!return pos)))

(!line 282)(!define fieldsel)(!assign fieldsel (!lambda (s pos buffer)
(!line 284)(!define (capt posn) ((!callmeth capt_sel match s pos)))
(!line 285)(!call assert posn)
(!line 286)(!assign pos (!call skip_ws s posn))
(!line 287)(!massign (capt posn) ((!callmeth capt_identifier match s pos)))
(!line 288)(!if (!not posn)
(!do
(!line 289)(!call syntaxerror "<name> expected")))
(!line 291)(!assign (!index buffer (!len buffer)) (!call quote capt))
(!line 292)(!return posn)))

(!line 296)(!define yindex)(!assign yindex (!lambda (s pos buffer)
(!line 298)(!define (capt posn) ((!callmeth capt_left_bracket match s pos)))
(!line 299)(!call assert posn)
(!line 300)(!assign pos (!call skip_ws s posn))
(!line 301)(!assign pos (!call expr s pos buffer !true))
(!line 302)(!massign (capt posn) ((!callmeth capt_right_bracket match s pos)))
(!line 303)(!if (!not posn)
(!do
(!line 304)(!call syntaxerror "] expected")))
(!line 306)(!return posn)))

(!line 310)(!define recfield)(!assign recfield (!lambda (s pos buffer)
(!line 312)(!define (capt posn) ((!callmeth capt_identifier match s pos)))
(!line 313)(!if posn
(!do
(!line 314)(!assign (!index buffer (!len buffer)) "\"")
(!line 315)(!assign (!index buffer (!len buffer)) capt)
(!line 316)(!assign (!index buffer (!len buffer)) "\"")
(!line 317)(!assign pos posn))(!do
(!line 319)(!assign pos (!call yindex s pos buffer))))
(!line 321)(!assign pos (!call skip_ws s pos))
(!line 322)(!massign (capt posn) ((!callmeth capt_equal match s pos)))
(!line 323)(!if (!not posn)
(!do
(!line 324)(!call syntaxerror "= expected")))
(!line 326)(!assign (!index buffer (!len buffer)) ": ")
(!line 327)(!assign pos (!call skip_ws s posn))
(!line 328)(!return (!call expr s pos buffer !true))))

(!line 332)(!define listfield)(!assign listfield (!lambda (s pos buffer)
(!line 334)(!return (!call expr s pos buffer))))

(!line 338)(!define field)(!assign field (!lambda (s pos buffer)
(!line 340)(!define (capt posn) ((!callmeth capt_identifier match s pos)))
(!line 341)(!if posn
(!do
(!line 342)(!if (!callmeth1 (!call1 sequence ws tok_equal) match s posn)
(!do
(!line 343)(!return (!call recfield s pos buffer)))(!do
(!line 345)(!return (!call listfield s pos buffer))))))
(!line 348)(!if (!callmeth1 tok_left_bracket match s pos)
(!do
(!line 349)(!return (!call recfield s pos buffer))))
(!line 351)(!return (!call listfield s pos buffer))))

(!line 355)(!define constructor)(!assign constructor (!lambda (s pos buffer)
(!line 357)(!define (capt posn) ((!callmeth capt_left_brace match s pos)))
(!line 358)(!if (!not posn)
(!do
(!line 359)(!call syntaxerror "{ expected")))
(!line 361)(!assign (!index buffer (!len buffer)) "(")
(!line 362)(!assign pos (!call skip_ws s posn))
(!line 363)(!repeat
(!line 364)(!if (!callmeth1 tok_right_brace match s pos)
(!do
(!line 365)(!break)))
(!line 367)(!assign pos (!call field s pos buffer))
(!line 368)(!assign pos (!call skip_ws s pos))
(!line 369)(!massign (capt posn) ((!callmeth capt_sep match s pos)))
(!line 370)(!if posn
(!do
(!line 371)(!assign (!index buffer (!len buffer)) " ")
(!line 372)(!assign pos (!call skip_ws s posn))))
(!not posn))
(!line 375)(!massign (capt posn) ((!callmeth capt_right_brace match s pos)))
(!line 376)(!if (!not posn)
(!do
(!line 377)(!call syntaxerror "} expected")))
(!line 379)(!assign (!index buffer (!len buffer)) ")")
(!line 380)(!return posn)))

(!line 384)(!define parlist)(!assign parlist (!lambda (s pos buffer ismethod)
(!line 387)(!if ismethod
(!do
(!line 388)(!assign (!index buffer (!len buffer)) "self")))
(!line 390)(!if (!not (!callmeth tok_right_paren match s pos))
(!do
(!line 391)(!if ismethod
(!do
(!line 392)(!assign (!index buffer (!len buffer)) " ")))
(!line 394)(!repeat
(!line 395)(!define (capt posn) ((!callmeth capt_identifier match s pos)))
(!line 396)(!if posn
(!do
(!line 397)(!assign (!index buffer (!len buffer)) capt)
(!line 398)(!assign pos posn))(!do
(!line 400)(!massign (capt posn) ((!callmeth capt_vararg match s pos)))
(!line 401)(!if posn
(!do
(!line 402)(!assign (!index buffer (!len buffer)) "!vararg")
(!line 403)(!return posn))(!do
(!line 405)(!call syntaxerror "<name> or '...' expected")))))
(!line 408)(!assign pos (!call skip_ws s pos))
(!line 409)(!massign (capt posn) ((!callmeth capt_comma match s pos)))
(!line 410)(!if posn
(!do
(!line 411)(!assign (!index buffer (!len buffer)) " ")
(!line 412)(!assign pos (!call skip_ws s posn))))
(!not posn))))
(!line 416)(!return pos)))

(!line 420)(!define body)(!assign body (!lambda (s pos buffer ismethod)
(!line 422)(!define (capt posn) ((!callmeth capt_left_paren match s pos)))
(!line 423)(!if (!not posn)
(!do
(!line 424)(!call syntaxerror "( expected")))
(!line 426)(!assign (!index buffer (!len buffer)) "(")
(!line 427)(!assign pos (!call skip_ws s posn))
(!line 428)(!assign pos (!call parlist s pos buffer ismethod))
(!line 429)(!assign pos (!call skip_ws s pos))
(!line 430)(!massign (capt posn) ((!callmeth capt_right_paren match s pos)))
(!line 431)(!if (!not posn)
(!do
(!line 432)(!call syntaxerror ") expected")))
(!line 434)(!assign (!index buffer (!len buffer)) ")")
(!line 435)(!assign pos (!call statlist s posn buffer))
(!line 436)(!assign pos (!call skip_ws s pos))
(!line 437)(!massign (capt posn) ((!callmeth capt_end match s pos)))
(!line 438)(!if (!not posn)
(!do
(!line 439)(!call syntaxerror "'end' expected")))
(!line 441)(!assign (!index buffer (!len buffer)) ")")
(!line 442)(!return posn)))

(!line 446)(!define explist)(!assign explist (!lambda (s pos buffer)
(!line 448)(!assign pos (!call expr s pos buffer))
(!line 449)(!assign pos (!call skip_ws s pos))
(!line 450)(!define (capt posn) ((!callmeth capt_comma match s pos)))
(!line 451)(!while posn

(!line 452)(!assign (!index buffer (!len buffer)) " ")
(!line 453)(!assign pos (!call skip_ws s posn))
(!line 454)(!assign pos (!call expr s pos buffer))
(!line 455)(!assign pos (!call skip_ws s pos))
(!line 456)(!massign (capt posn) ((!callmeth capt_comma match s pos))))
(!line 458)(!return pos)))

(!line 462)(!define funcargs)(!assign funcargs (!lambda (s pos buffer)
(!line 464)(!define (capt posn) ((!callmeth capt_left_paren match s pos)))
(!line 465)(!if posn
(!do
(!line 466)(!assign pos (!call skip_ws s posn))
(!line 467)(!massign (capt posn) ((!callmeth capt_right_paren match s pos)))
(!line 468)(!if posn
(!do
(!line 469)(!return posn)))
(!line 471)(!assign pos (!call explist s pos buffer))
(!line 472)(!massign (capt posn) ((!callmeth capt_right_paren match s pos)))
(!line 473)(!if posn
(!do
(!line 474)(!return posn))(!do
(!line 476)(!call syntaxerror ") expected")))))
(!line 480)(!if (!callmeth1 tok_left_brace match s pos)
(!do
(!line 481)(!return (!call constructor s pos buffer))))
(!line 484)(!massign (capt posn) ((!callmeth capt_string match s pos)))
(!line 485)(!if posn
(!do
(!line 486)(!assign (!index buffer (!len buffer)) capt)
(!line 487)(!return posn)))
(!line 489)(!call syntaxerror "function arguments expected")))

(!line 493)(!define primaryexpr)(!assign primaryexpr (!lambda (s pos buffer)
(!line 495)(!assign pos (!call skip_ws s pos))
(!line 496)(!define (capt posn) ((!callmeth capt_left_paren match s pos)))
(!line 497)(!if posn
(!do
(!line 498)(!assign pos (!call expr s posn buffer !true))
(!line 499)(!assign pos (!call skip_ws s pos))
(!line 500)(!massign (capt posn) ((!callmeth capt_right_paren match s pos)))
(!line 501)(!if posn
(!do
(!line 502)(!return posn))(!do
(!line 504)(!call syntaxerror ") expected")))))
(!line 507)(!massign (capt posn) ((!callmeth capt_identifier match s pos)))
(!line 508)(!if posn
(!do
(!line 509)(!assign (!index buffer (!len buffer)) capt)
(!line 510)(!return posn)))
(!line 512)(!call syntaxerror "unexpected symbol")))

(!line 516)(!define suffixedexpr)(!assign suffixedexpr (!lambda (s pos buffer one)
(!line 519)(!define buf ())
(!line 520)(!assign pos (!call primaryexpr s pos buf))
(!line 521)(!define exp (!call tconcat buf))
(!line 522)(!while !true

(!line 523)(!assign buf ())
(!line 524)(!assign pos (!call skip_ws s pos))
(!line 525)(!if (!callmeth1 tok_dot match s pos)
(!do
(!line 526)(!assign (!index buf (!len buf)) "(!index ")
(!line 527)(!assign (!index buf (!len buf)) exp)
(!line 528)(!assign (!index buf (!len buf)) " ")
(!line 529)(!assign pos (!call fieldsel s pos buf))
(!line 530)(!assign (!index buf (!len buf)) ")")
(!line 531)(!assign exp (!call tconcat buf)))(!if (!callmeth1 tok_left_bracket match s pos)
(!do
(!line 533)(!assign (!index buf (!len buf)) "(!index ")
(!line 534)(!assign (!index buf (!len buf)) exp)
(!line 535)(!assign (!index buf (!len buf)) " ")
(!line 536)(!assign pos (!call yindex s pos buf))
(!line 537)(!assign (!index buf (!len buf)) ")")
(!line 538)(!assign exp (!call tconcat buf)))(!if (!callmeth1 tok_colon match s pos)
(!do
(!line 540)(!define (_ posn) ((!callmeth capt_colon match s pos)))
(!line 541)(!if one
(!do
(!line 542)(!assign (!index buf (!len buf)) "(!callmeth1 "))(!do
(!line 544)(!assign (!index buf (!len buf)) "(!callmeth ")))
(!line 546)(!assign (!index buf (!len buf)) exp)
(!line 547)(!assign (!index buf (!len buf)) " ")
(!line 548)(!assign pos (!call skip_ws s posn))
(!line 549)(!define (capt posn) ((!callmeth capt_identifier match s pos)))
(!line 550)(!if (!not posn)
(!do
(!line 551)(!call syntaxerror "<name> expected")))
(!line 553)(!assign (!index buf (!len buf)) capt)
(!line 554)(!assign (!index buf (!len buf)) " ")
(!line 555)(!assign pos (!call skip_ws s posn))
(!line 556)(!assign pos (!call funcargs s pos buf))
(!line 557)(!assign (!index buf (!len buf)) ")")
(!line 558)(!assign exp (!call tconcat buf)))(!if (!or (!or (!callmeth1 tok_left_paren match s pos) (!callmeth tok_left_brace match s pos)) (!callmeth tok_string match s pos))
(!do
(!line 560)(!if one
(!do
(!line 561)(!assign (!index buf (!len buf)) "(!call1 "))(!do
(!line 563)(!assign (!index buf (!len buf)) "(!call ")))
(!line 565)(!assign (!index buf (!len buf)) exp)
(!line 566)(!assign (!index buf (!len buf)) " ")
(!line 567)(!assign pos (!call funcargs s pos buf))
(!line 568)(!assign (!index buf (!len buf)) ")")
(!line 569)(!assign exp (!call tconcat buf)))(!do
(!line 571)(!assign (!index buffer (!len buffer)) exp)
(!line 572)(!return pos)))))))))

(!line 578)(!define simpleexpr)(!assign simpleexpr (!lambda (s pos buffer one)
(!line 581)(!define (capt posn) ((!callmeth capt_number match s pos)))
(!line 582)(!if posn
(!do
(!line 583)(!assign (!index buffer (!len buffer)) capt)
(!line 584)(!return posn)))
(!line 586)(!massign (capt posn) ((!callmeth capt_string match s pos)))
(!line 587)(!if posn
(!do
(!line 588)(!assign (!index buffer (!len buffer)) capt)
(!line 589)(!return posn)))
(!line 591)(!massign (capt posn) ((!callmeth capt_nil match s pos)))
(!line 592)(!if posn
(!do
(!line 593)(!assign (!index buffer (!len buffer)) "!nil")
(!line 594)(!return posn)))
(!line 596)(!massign (capt posn) ((!callmeth capt_true match s pos)))
(!line 597)(!if posn
(!do
(!line 598)(!assign (!index buffer (!len buffer)) "!true")
(!line 599)(!return posn)))
(!line 601)(!massign (capt posn) ((!callmeth capt_false match s pos)))
(!line 602)(!if posn
(!do
(!line 603)(!assign (!index buffer (!len buffer)) "!false")
(!line 604)(!return posn)))
(!line 606)(!massign (capt posn) ((!callmeth capt_vararg match s pos)))
(!line 607)(!if posn
(!do
(!line 608)(!assign (!index buffer (!len buffer)) "!vararg")
(!line 609)(!return posn)))
(!line 611)(!if (!callmeth1 tok_left_brace match s pos)
(!do
(!line 612)(!return (!call constructor s pos buffer))))
(!line 614)(!massign (capt posn) ((!callmeth capt_function match s pos)))
(!line 615)(!if posn
(!do
(!line 616)(!assign (!index buffer (!len buffer)) "(!lambda ")
(!line 617)(!assign pos (!call skip_ws s posn))
(!line 618)(!return (!call body s pos buffer))))
(!line 620)(!return (!call suffixedexpr s pos buffer one))))

(!line 624)(!define unop ("not": "(!not " "-": "(!neg " "#": "(!len " ))
(!line 629)(!define binop ("+": "(!add " "-": "(!sub " "*": "(!mul " "/": "(!div " "%": "(!mod " "^": "(!pow " "..": "(!concat " "~=": "(!ne " "==": "(!eq " "<=": "(!le " "<": "(!lt " ">=": "(!ge " ">": "(!gt " "and": "(!and " "or": "(!or " ))
(!line 646)(!define priority ("+": (6 6) "-": (6 6) "*": (7 7) "/": (7 7) "%": (7 7) "^": (10 9) "..": (5 4) "~=": (3 3) "==": (3 3) "<=": (3 3) "<": (3 3) ">=": (3 3) ">": (3 3) "and": (2 2) "or": (1 1) ))
(!line 666)(!assign expr (!lambda (s pos buffer one limit)
(!line 668)(!assign limit (!or limit 0))
(!line 669)(!define (capt posn) ((!callmeth capt_unopr match s pos)))
(!line 670)(!define buf ())
(!line 671)(!if posn
(!do
(!line 672)(!assign (!index buf (!len buf)) (!index unop capt))
(!line 673)(!assign pos (!call skip_ws s posn))
(!line 674)(!assign pos (!call expr s pos buf !false 8))
(!line 675)(!assign (!index buf (!len buf)) ")"))(!do
(!line 677)(!assign pos (!call simpleexpr s pos buf one))))
(!line 679)(!define exp (!call tconcat buf))
(!line 680)(!assign pos (!call skip_ws s pos))
(!line 681)(!massign (capt posn) ((!callmeth capt_binopr match s pos)))
(!line 682)(!while (!and posn (!gt (!index (!index priority capt) 0) limit))

(!line 683)(!assign buf ((!index binop capt) exp " "))
(!line 684)(!assign pos (!call skip_ws s posn buf))
(!line 685)(!assign pos (!call expr s pos buf !false (!index (!index priority capt) 1)))
(!line 686)(!assign pos (!call skip_ws s pos))
(!line 687)(!assign (!index buf (!len buf)) ")")
(!line 688)(!assign exp (!call tconcat buf))
(!line 689)(!massign (capt posn) ((!callmeth capt_binopr match s pos))))
(!line 691)(!assign (!index buffer (!len buffer)) exp)
(!line 692)(!return pos)))

(!line 696)(!define block)(!assign block (!lambda (s pos buffer)
(!line 698)(!define pos (!call statlist s pos buffer))
(!line 699)(!assign (!index buffer (!len buffer)) ")")
(!line 700)(!return pos)))

(!line 704)(!define assignment)(!assign assignment (!lambda (s pos buffer n)
(!line 706)(!define (capt posn) ((!callmeth capt_comma match s pos)))
(!line 707)(!if posn
(!do
(!line 708)(!if (!eq n 1)
(!do
(!line 709)(!define var (!index buffer (!sub (!len buffer) 1)))
(!line 710)(!assign (!index buffer (!sub (!len buffer) 1)) "(!line ")
(!line 711)(!assign (!index buffer (!len buffer)) lineno)
(!line 712)(!assign (!index buffer (!len buffer)) ")(!massign (")
(!line 713)(!assign (!index buffer (!len buffer)) var)))
(!line 715)(!assign (!index buffer (!len buffer)) " ")
(!line 716)(!assign pos (!call skip_ws s posn))
(!line 717)(!assign pos (!call suffixedexpr s pos buffer))
(!line 718)(!assign pos (!call skip_ws s pos))
(!line 719)(!return (!call assignment s pos buffer (!add n 1))))(!do
(!line 722)(!massign (capt posn) ((!callmeth capt_equal match s pos)))
(!line 723)(!if (!not posn)
(!do
(!line 724)(!call syntaxerror "= expected")))
(!line 726)(!if (!eq n 1)
(!do
(!line 727)(!define var (!index buffer (!sub (!len buffer) 1)))
(!line 728)(!assign (!index buffer (!sub (!len buffer) 1)) "(!line ")
(!line 729)(!assign (!index buffer (!len buffer)) lineno)
(!line 730)(!assign (!index buffer (!len buffer)) ")(!assign ")
(!line 731)(!assign (!index buffer (!len buffer)) var)
(!line 732)(!assign (!index buffer (!len buffer)) " "))(!do
(!line 734)(!assign (!index buffer (!len buffer)) ") (")))
(!line 736)(!assign pos (!call skip_ws s posn))
(!line 737)(!assign pos (!call explist s pos buffer))
(!line 738)(!assign (!index buffer (!len buffer)) ")")
(!line 739)(!if (!ne n 1)
(!do
(!line 740)(!assign (!index buffer (!len buffer)) ")")))
(!line 742)(!return pos)))))

(!line 747)(!define breakstat)(!assign breakstat (!lambda (s pos buffer)
(!line 748)(!define (capt posn) ((!callmeth capt_break match s pos)))
(!line 749)(!call assert posn)
(!line 750)(!assign (!index buffer (!len buffer)) "(!line ")
(!line 751)(!assign (!index buffer (!len buffer)) lineno)
(!line 752)(!assign (!index buffer (!len buffer)) ")(!break)")
(!line 753)(!return posn)))

(!line 757)(!define gotostat)(!assign gotostat (!lambda (s pos buffer)
(!line 758)(!define (capt posn) ((!callmeth capt_goto match s pos)))
(!line 759)(!call assert posn)
(!line 760)(!assign (!index buffer (!len buffer)) "(!line ")
(!line 761)(!assign (!index buffer (!len buffer)) lineno)
(!line 762)(!assign (!index buffer (!len buffer)) ")(!goto ")
(!line 763)(!assign pos (!call skip_ws s posn))
(!line 764)(!massign (capt posn) ((!callmeth capt_identifier match s pos)))
(!line 765)(!if (!not posn)
(!do
(!line 766)(!call syntaxerror "<name> expected")))
(!line 768)(!assign (!index buffer (!len buffer)) capt)
(!line 769)(!assign (!index buffer (!len buffer)) ")")
(!line 770)(!return posn)))

(!line 774)(!define labelstat)(!assign labelstat (!lambda (s pos buffer)
(!line 776)(!define (capt posn) ((!callmeth capt_identifier match s pos)))
(!line 777)(!if (!not posn)
(!do
(!line 778)(!call syntaxerror "<name> expected")))
(!line 780)(!assign (!index buffer (!len buffer)) "(!line ")
(!line 781)(!assign (!index buffer (!len buffer)) lineno)
(!line 782)(!assign (!index buffer (!len buffer)) ")(!label ")
(!line 783)(!assign (!index buffer (!len buffer)) capt)
(!line 784)(!assign (!index buffer (!len buffer)) ")")
(!line 785)(!assign pos (!call skip_ws s posn))
(!line 786)(!massign (capt posn) ((!callmeth capt_dbcolon match s pos)))
(!line 787)(!if (!not posn)
(!do
(!line 788)(!call syntaxerror ":: expected")))
(!line 790)(!return posn)))

(!line 794)(!define whilestat)(!assign whilestat (!lambda (s pos buffer)
(!line 796)(!define (capt posn) ((!callmeth capt_while match s pos)))
(!line 797)(!call assert posn)
(!line 798)(!assign (!index buffer (!len buffer)) "(!line ")
(!line 799)(!assign (!index buffer (!len buffer)) lineno)
(!line 800)(!assign (!index buffer (!len buffer)) ")(!while ")
(!line 801)(!assign pos (!call skip_ws s posn))
(!line 802)(!assign pos (!call expr s pos buffer !true))
(!line 803)(!assign (!index buffer (!len buffer)) "\x0A")
(!line 804)(!assign pos (!call skip_ws s pos))
(!line 805)(!massign (capt posn) ((!callmeth capt_do match s pos)))
(!line 806)(!if (!not posn)
(!do
(!line 807)(!call syntaxerror "do expected")))
(!line 809)(!assign pos (!call skip_ws s posn))
(!line 810)(!assign pos (!call block s pos buffer))
(!line 811)(!assign pos (!call skip_ws s pos))
(!line 812)(!massign (capt posn) ((!callmeth capt_end match s pos)))
(!line 813)(!if (!not posn)
(!do
(!line 814)(!call syntaxerror "end expected")))
(!line 816)(!return posn)))

(!line 820)(!define repeatstat)(!assign repeatstat (!lambda (s pos buffer)
(!line 822)(!define (capt posn) ((!callmeth capt_repeat match s pos)))
(!line 823)(!call assert posn)
(!line 824)(!assign (!index buffer (!len buffer)) "(!line ")
(!line 825)(!assign (!index buffer (!len buffer)) lineno)
(!line 826)(!assign (!index buffer (!len buffer)) ")(!repeat")
(!line 827)(!assign pos (!call skip_ws s posn))
(!line 828)(!assign pos (!call statlist s pos buffer))
(!line 829)(!assign pos (!call skip_ws s pos))
(!line 830)(!massign (capt posn) ((!callmeth capt_until match s pos)))
(!line 831)(!if (!not posn)
(!do
(!line 832)(!call syntaxerror "until expected")))
(!line 834)(!assign pos (!call skip_ws s posn))
(!line 835)(!assign (!index buffer (!len buffer)) "\x0A")
(!line 836)(!assign pos (!call expr s pos buffer !true))
(!line 837)(!assign (!index buffer (!len buffer)) ")")
(!line 838)(!return pos)))

(!line 842)(!define forbody)(!assign forbody (!lambda (s pos buffer name)
(!line 844)(!assign (!index buffer (!len buffer)) "\x0A")
(!line 845)(!define (capt posn) ((!callmeth capt_do match s pos)))
(!line 846)(!if (!not posn)
(!do
(!line 847)(!call syntaxerror "do expected")))
(!line 849)(!if name
(!do
(!line 850)(!assign (!index buffer (!len buffer)) "(!define ")
(!line 851)(!assign (!index buffer (!len buffer)) name)
(!line 852)(!assign (!index buffer (!len buffer)) " ")
(!line 853)(!assign (!index buffer (!len buffer)) name)
(!line 854)(!assign (!index buffer (!len buffer)) ")")))
(!line 856)(!assign pos (!call skip_ws s posn))
(!line 857)(!return (!call block s pos buffer))))

(!line 861)(!define fornum)(!assign fornum (!lambda (s pos buffer name)
(!line 863)(!define (capt posn) ((!callmeth capt_equal match s pos)))
(!line 864)(!if (!not posn)
(!do
(!line 865)(!call syntaxerror "= expected")))
(!line 867)(!assign (!index buffer (!len buffer)) "(!line ")
(!line 868)(!assign (!index buffer (!len buffer)) lineno)
(!line 869)(!assign (!index buffer (!len buffer)) ")(!loop ")
(!line 870)(!assign (!index buffer (!len buffer)) name)
(!line 871)(!assign (!index buffer (!len buffer)) " ")
(!line 872)(!assign pos (!call skip_ws s posn))
(!line 873)(!assign pos (!call expr s pos buffer !true))
(!line 874)(!massign (capt posn) ((!callmeth capt_comma match s pos)))
(!line 875)(!if (!not posn)
(!do
(!line 876)(!call syntaxerror ", expected")))
(!line 878)(!assign (!index buffer (!len buffer)) " ")
(!line 879)(!assign pos (!call skip_ws s posn))
(!line 880)(!assign pos (!call expr s pos buffer !true))
(!line 881)(!massign (capt posn) ((!callmeth capt_comma match s pos)))
(!line 882)(!if posn
(!do
(!line 883)(!assign (!index buffer (!len buffer)) " ")
(!line 884)(!assign pos (!call skip_ws s posn))
(!line 885)(!assign pos (!call expr s pos buffer !true)))(!do
(!line 887)(!assign (!index buffer (!len buffer)) " 1 ")))
(!line 889)(!return (!call forbody s pos buffer name))))

(!line 893)(!define forlist)(!assign forlist (!lambda (s pos buffer name1)
(!line 895)(!assign (!index buffer (!len buffer)) "(!line ")
(!line 896)(!assign (!index buffer (!len buffer)) lineno)
(!line 897)(!assign (!index buffer (!len buffer)) ")(!for (")
(!line 898)(!assign (!index buffer (!len buffer)) name1)
(!line 899)(!define (capt posn) ((!callmeth capt_comma match s pos)))
(!line 900)(!while posn

(!line 901)(!assign (!index buffer (!len buffer)) " ")
(!line 902)(!assign pos (!call skip_ws s posn))
(!line 903)(!define (capt posnn) ((!callmeth capt_identifier match s pos)))
(!line 904)(!if (!not posnn)
(!do
(!line 905)(!call syntaxerror "<name> expected")))
(!line 907)(!assign (!index buffer (!len buffer)) capt)
(!line 908)(!assign pos (!call skip_ws s posnn))
(!line 909)(!massign (capt posn) ((!callmeth capt_comma match s pos))))
(!line 911)(!massign (capt posn) ((!callmeth capt_in match s pos)))
(!line 912)(!if (!not posn)
(!do
(!line 913)(!call syntaxerror "in expected")))
(!line 915)(!assign (!index buffer (!len buffer)) ") (")
(!line 916)(!assign pos (!call skip_ws s posn))
(!line 917)(!assign pos (!call explist s pos buffer))
(!line 918)(!assign (!index buffer (!len buffer)) ")")
(!line 919)(!return (!call forbody s pos buffer))))

(!line 923)(!define forstat)(!assign forstat (!lambda (s pos buffer)
(!line 925)(!define (capt posn) ((!callmeth capt_for match s pos)))
(!line 926)(!call assert posn)
(!line 927)(!assign pos (!call skip_ws s posn))
(!line 928)(!massign (capt posn) ((!callmeth capt_identifier match s pos)))
(!line 929)(!if (!not posn)
(!do
(!line 930)(!call syntaxerror "<name> expected")))
(!line 932)(!assign pos (!call skip_ws s posn))
(!line 933)(!if (!callmeth1 tok_equal match s pos)
(!do
(!line 934)(!assign pos (!call fornum s pos buffer capt)))(!if (!or (!callmeth1 tok_comma match s pos) (!callmeth tok_in match s pos))
(!do
(!line 936)(!assign pos (!call forlist s pos buffer capt)))(!do
(!line 938)(!call syntaxerror "'=' or 'in' expected"))))
(!line 940)(!assign pos (!call skip_ws s pos))
(!line 941)(!massign (capt posn) ((!callmeth capt_end match s pos)))
(!line 942)(!if (!not posn)
(!do
(!line 943)(!call syntaxerror "end expected")))
(!line 945)(!return posn)))

(!line 949)(!define test_then_block)(!assign test_then_block (!lambda (s pos buffer)
(!line 951)(!define (capt posn) ((!callmeth capt_if match s pos)))
(!line 952)(!if (!not posn)
(!do
(!line 953)(!massign (capt posn) ((!callmeth capt_elseif match s pos)))
(!line 954)(!call assert posn)))
(!line 956)(!assign (!index buffer (!len buffer)) "(!if ")
(!line 957)(!assign pos (!call skip_ws s posn))
(!line 958)(!assign pos (!call expr s pos buffer !true))
(!line 959)(!assign (!index buffer (!len buffer)) "\x0A")
(!line 960)(!assign pos (!call skip_ws s pos))
(!line 961)(!massign (capt posn) ((!callmeth capt_then match s pos)))
(!line 962)(!if (!not posn)
(!do
(!line 963)(!call syntaxerror "then expected")))
(!line 965)(!assign (!index buffer (!len buffer)) "(!do")
(!line 966)(!assign pos (!call skip_ws s posn))
(!line 967)(!return (!call block s pos buffer))))

(!line 970)(!define ifstat)(!assign ifstat (!lambda (s pos buffer)
(!line 972)(!assign (!index buffer (!len buffer)) "(!line ")
(!line 973)(!assign (!index buffer (!len buffer)) lineno)
(!line 974)(!assign (!index buffer (!len buffer)) ")")
(!line 975)(!assign pos (!call test_then_block s pos buffer))
(!line 976)(!define n 1)
(!line 977)(!while (!callmeth1 tok_elseif match s pos)

(!line 978)(!assign pos (!call test_then_block s pos buffer))
(!line 979)(!assign n (!add n 1)))
(!line 981)(!define (capt posn) ((!callmeth capt_else match s pos)))
(!line 982)(!if posn
(!do
(!line 983)(!assign (!index buffer (!len buffer)) "(!do")
(!line 984)(!assign pos (!call skip_ws s posn))
(!line 985)(!assign pos (!call block s pos buffer))))
(!line 987)(!massign (capt posn) ((!callmeth capt_end match s pos)))
(!line 988)(!if (!not posn)
(!do
(!line 989)(!call syntaxerror "end expected")))
(!line 991)(!loop i 1 n 1
(!define i i)
(!line 992)(!assign (!index buffer (!len buffer)) ")"))
(!line 994)(!return posn)))

(!line 998)(!define localfunc)(!assign localfunc (!lambda (s pos buffer)
(!line 999)(!define (capt posn) ((!callmeth capt_function match s pos)))
(!line 1000)(!call assert posn)
(!line 1001)(!assign pos (!call skip_ws s posn))
(!line 1002)(!massign (capt posn) ((!callmeth capt_identifier match s pos)))
(!line 1003)(!if (!not posn)
(!do
(!line 1004)(!call syntaxerror "<name> expected")))
(!line 1006)(!assign (!index buffer (!len buffer)) "(!line ")
(!line 1007)(!assign (!index buffer (!len buffer)) lineno)
(!line 1008)(!assign (!index buffer (!len buffer)) ")(!define ")
(!line 1009)(!assign (!index buffer (!len buffer)) capt)
(!line 1010)(!assign (!index buffer (!len buffer)) ")(!assign ")
(!line 1011)(!assign (!index buffer (!len buffer)) capt)
(!line 1012)(!assign (!index buffer (!len buffer)) " (!lambda ")
(!line 1013)(!assign pos (!call skip_ws s posn))
(!line 1014)(!assign pos (!call body s pos buffer))
(!line 1015)(!assign (!index buffer (!len buffer)) ")\x0A")
(!line 1016)(!return pos)))

(!line 1020)(!define localstat)(!assign localstat (!lambda (s pos buffer)
(!line 1022)(!assign (!index buffer (!len buffer)) "(!line ")
(!line 1023)(!assign (!index buffer (!len buffer)) lineno)
(!line 1024)(!assign (!index buffer (!len buffer)) ")(!define ")
(!line 1025)(!define multi !false)
(!line 1026)(!define (capt posn))
(!line 1027)(!repeat
(!line 1028)(!massign (capt posn) ((!callmeth capt_identifier match s pos)))
(!line 1029)(!if (!not pos)
(!do
(!line 1030)(!call syntaxerror "<name> expected")))
(!line 1032)(!define ident capt)
(!line 1033)(!assign (!index buffer (!len buffer)) ident)
(!line 1034)(!assign pos (!call skip_ws s posn))
(!line 1035)(!massign (capt posn) ((!callmeth capt_comma match s pos)))
(!line 1036)(!if posn
(!do
(!line 1037)(!if (!not multi)
(!do
(!line 1038)(!assign multi !true)
(!line 1039)(!assign (!index buffer (!sub (!len buffer) 1)) "(")
(!line 1040)(!assign (!index buffer (!len buffer)) ident)))
(!line 1042)(!assign (!index buffer (!len buffer)) " ")
(!line 1043)(!assign pos (!call skip_ws s posn))))
(!not posn))
(!line 1046)(!if multi
(!do
(!line 1047)(!assign (!index buffer (!len buffer)) ")")))
(!line 1049)(!massign (capt posn) ((!callmeth capt_equal match s pos)))
(!line 1050)(!if posn
(!do
(!line 1051)(!assign (!index buffer (!len buffer)) " ")
(!line 1052)(!if multi
(!do
(!line 1053)(!assign (!index buffer (!len buffer)) "(")))
(!line 1055)(!assign pos (!call skip_ws s posn buffer))
(!line 1056)(!assign pos (!call explist s pos buffer))
(!line 1057)(!if multi
(!do
(!line 1058)(!assign (!index buffer (!len buffer)) ")")))))
(!line 1061)(!assign (!index buffer (!len buffer)) ")")
(!line 1062)(!return pos)))

(!line 1066)(!define funcname)(!assign funcname (!lambda (s pos buffer)
(!line 1068)(!define (exp posn) ((!callmeth capt_identifier match s pos)))
(!line 1069)(!if (!not posn)
(!do
(!line 1070)(!call syntaxerror "identifier expected")))
(!line 1072)(!assign pos (!call skip_ws s posn))
(!line 1073)(!assign posn (!callmeth tok_dot match s pos))
(!line 1074)(!while posn

(!line 1075)(!define buf ("(!index " exp " "))
(!line 1076)(!assign pos (!call fieldsel s pos buf))
(!line 1077)(!assign (!index buf (!len buf)) ")")
(!line 1078)(!assign exp (!call tconcat buf))
(!line 1079)(!assign pos (!call skip_ws s pos))
(!line 1080)(!assign posn (!callmeth tok_dot match s pos)))
(!line 1082)(!assign posn (!callmeth tok_colon match s pos))
(!line 1083)(!if posn
(!do
(!line 1084)(!define buf ("(!index " exp " "))
(!line 1085)(!assign pos (!call fieldsel s pos buf))
(!line 1086)(!assign (!index buf (!len buf)) ")")
(!line 1087)(!assign exp (!call tconcat buf))
(!line 1088)(!assign pos (!call skip_ws s pos))))
(!line 1090)(!assign (!index buffer (!len buffer)) exp)
(!line 1091)(!return pos posn)))

(!line 1095)(!define funcstat)(!assign funcstat (!lambda (s pos buffer)
(!line 1097)(!define (capt posn) ((!callmeth capt_function match s pos)))
(!line 1098)(!call assert posn)
(!line 1099)(!assign pos (!call skip_ws s posn))
(!line 1100)(!assign (!index buffer (!len buffer)) "(!line ")
(!line 1101)(!assign (!index buffer (!len buffer)) lineno)
(!line 1102)(!assign (!index buffer (!len buffer)) ")(!assign ")
(!line 1103)(!define (posn ismethod) ((!call funcname s pos buffer)))
(!line 1104)(!assign (!index buffer (!len buffer)) " (!lambda ")
(!line 1105)(!assign pos (!call skip_ws s posn))
(!line 1106)(!assign pos (!call body s pos buffer ismethod))
(!line 1107)(!assign (!index buffer (!len buffer)) ")\x0A")
(!line 1108)(!return pos)))

(!line 1112)(!define exprstat)(!assign exprstat (!lambda (s pos buffer)
(!line 1114)(!define buf ())
(!line 1115)(!define lineno lineno)
(!line 1116)(!assign pos (!call suffixedexpr s pos buf))
(!line 1117)(!assign pos (!call skip_ws s pos))
(!line 1118)(!if (!or (!callmeth1 tok_equal match s pos) (!callmeth tok_comma match s pos))
(!do
(!line 1119)(!assign (!index buffer (!len buffer)) (!call tconcat buf))
(!line 1120)(!return (!call assignment s pos buffer 1)))(!do
(!line 1122)(!assign (!index buffer (!len buffer)) "(!line ")
(!line 1123)(!assign (!index buffer (!len buffer)) lineno)
(!line 1124)(!assign (!index buffer (!len buffer)) ")")
(!line 1125)(!assign (!index buffer (!len buffer)) (!call tconcat buf))
(!line 1126)(!return pos)))))

(!line 1131)(!define retstat)(!assign retstat (!lambda (s pos buffer)
(!line 1133)(!assign (!index buffer (!len buffer)) "(!line ")
(!line 1134)(!assign (!index buffer (!len buffer)) lineno)
(!line 1135)(!assign (!index buffer (!len buffer)) ")(!return ")
(!line 1136)(!if (!and (!not (!call block_follow s pos !true)) (!not (!callmeth tok_semicolon match s pos)))
(!do
(!line 1137)(!assign pos (!call explist s pos buffer))))
(!line 1139)(!assign (!index buffer (!len buffer)) ")")
(!line 1140)(!define (capt posn) ((!callmeth capt_semicolon match s pos)))
(!line 1141)(!if posn
(!do
(!line 1142)(!return posn)))
(!line 1144)(!return pos)))

(!line 1148)(!assign statement (!lambda (s pos buffer)
(!line 1150)(!assign pos (!call skip_ws s pos))
(!line 1151)(!define (capt posn) ((!callmeth capt_semicolon match s pos)))
(!line 1152)(!if posn
(!do
(!line 1153)(!return posn)))
(!line 1156)(!if (!callmeth1 tok_if match s pos)
(!do
(!line 1157)(!return (!call ifstat s pos buffer))))
(!line 1160)(!if (!callmeth1 tok_while match s pos)
(!do
(!line 1161)(!return (!call whilestat s pos buffer))))
(!line 1164)(!massign (capt posn) ((!callmeth capt_do match s pos)))
(!line 1165)(!if posn
(!do
(!line 1166)(!assign (!index buffer (!len buffer)) "(!line ")
(!line 1167)(!assign (!index buffer (!len buffer)) lineno)
(!line 1168)(!assign (!index buffer (!len buffer)) ")(!do")
(!line 1169)(!assign pos (!call block s posn buffer))
(!line 1170)(!massign (capt posn) ((!callmeth capt_end match s pos)))
(!line 1171)(!if posn
(!do
(!line 1172)(!return posn))(!do
(!line 1174)(!call syntaxerror "'end' expected")))))
(!line 1178)(!if (!callmeth1 tok_for match s pos)
(!do
(!line 1179)(!return (!call forstat s pos buffer))))
(!line 1182)(!if (!callmeth1 tok_repeat match s pos)
(!do
(!line 1183)(!return (!call repeatstat s pos buffer))))
(!line 1186)(!if (!callmeth1 tok_function match s pos)
(!do
(!line 1187)(!return (!call funcstat s pos buffer))))
(!line 1190)(!massign (capt posn) ((!callmeth capt_local match s pos)))
(!line 1191)(!if posn
(!do
(!line 1192)(!assign pos (!call skip_ws s posn))
(!line 1193)(!if (!callmeth1 tok_function match s pos)
(!do
(!line 1194)(!return (!call localfunc s pos buffer)))(!do
(!line 1196)(!return (!call localstat s pos buffer))))))
(!line 1200)(!massign (capt posn) ((!callmeth capt_dbcolon match s pos)))
(!line 1201)(!if posn
(!do
(!line 1202)(!assign pos (!call skip_ws s posn))
(!line 1203)(!return (!call labelstat s pos buffer))))
(!line 1206)(!massign (capt posn) ((!callmeth capt_return match s pos)))
(!line 1207)(!if posn
(!do
(!line 1208)(!assign pos (!call skip_ws s posn))
(!line 1209)(!return (!call retstat s pos buffer))))
(!line 1212)(!if (!callmeth1 tok_break match s pos)
(!do
(!line 1213)(!return (!call breakstat s pos buffer))))
(!line 1216)(!if (!callmeth1 tok_goto match s pos)
(!do
(!line 1217)(!return (!call gotostat s pos buffer))))
(!line 1220)(!return (!call exprstat s pos buffer))))

(!line 1224)(!define translate)(!assign translate (!lambda (s fname)
(!line 1225)(!if (!callmeth1 bytecode match s)
(!do
(!line 1226)(!return s)))
(!line 1228)(!define pos (!or (!callmeth (!call sequence bom position) match s 0) 0))
(!line 1229)(!assign pos (!or (!callmeth (!call sequence shebang position) match s pos) pos))
(!line 1230)(!assign lineno 1)
(!line 1231)(!define buffer ("(!line " (!call quote fname) " " lineno ")"))
(!line 1232)(!assign pos (!call statlist s pos buffer))
(!line 1233)(!if (!not (!callmeth eos match s pos))
(!do
(!line 1234)(!call syntaxerror (!concat "<eof> expected at " pos))))
(!line 1236)(!assign (!index buffer (!len buffer)) "\x0A; end of generation")
(!line 1237)(!return (!call tconcat buffer))))

(!line 1242)(!define fname (!and arg (!index arg 1)))
(!line 1243)(!if fname
(!do
(!line 1244)(!define (f msg) ((!call (!index (!index _G "io") "open") fname "r")))
(!line 1245)(!if (!not f)
(!do
(!line 1246)(!call error msg)))
(!line 1248)(!define s (!callmeth f read "*a"))
(!line 1249)(!callmeth f close )
(!line 1250)(!define code (!call translate s (!concat "@" fname)))
(!line 1251)(!call print "; bootstrap")
(!line 1252)(!call print code))(!do
(!line 1254)(!return translate)))
; end of generation
